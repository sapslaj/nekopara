// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class ServiceConnectionKubernetes extends pulumi.CustomResource {
  /**
   * Get an existing ServiceConnectionKubernetes resource's state with the given name, ID, and optional extra
   * properties used to qualify the lookup.
   *
   * @param name The _unique_ name of the resulting resource.
   * @param id The _unique_ provider ID of the resource to lookup.
   * @param state Any extra arguments used during the lookup.
   * @param opts Optional settings to control the behavior of the CustomResource.
   */
  public static get(
    name: string,
    id: pulumi.Input<pulumi.ID>,
    state?: ServiceConnectionKubernetesState,
    opts?: pulumi.CustomResourceOptions,
  ): ServiceConnectionKubernetes {
    return new ServiceConnectionKubernetes(name, <any> state, { ...opts, id: id });
  }

  /** @internal */
  public static readonly __pulumiType = "authentik:index/serviceConnectionKubernetes:ServiceConnectionKubernetes";

  /**
   * Returns true if the given object is an instance of ServiceConnectionKubernetes.  This is designed to work even
   * when multiple copies of the Pulumi SDK have been loaded into the same process.
   */
  public static isInstance(obj: any): obj is ServiceConnectionKubernetes {
    if (obj === undefined || obj === null) {
      return false;
    }
    return obj["__pulumiType"] === ServiceConnectionKubernetes.__pulumiType;
  }

  /**
   * JSON format expected. Use jsonencode() to pass objects. Defaults to `{}`.
   */
  public readonly kubeconfig!: pulumi.Output<string | undefined>;
  /**
   * Defaults to `false`.
   */
  public readonly local!: pulumi.Output<boolean | undefined>;
  public readonly name!: pulumi.Output<string>;
  public readonly serviceConnectionKubernetesId!: pulumi.Output<string>;
  /**
   * Defaults to `true`.
   */
  public readonly verifySsl!: pulumi.Output<boolean | undefined>;

  /**
   * Create a ServiceConnectionKubernetes resource with the given unique name, arguments, and options.
   *
   * @param name The _unique_ name of the resource.
   * @param args The arguments to use to populate this resource's properties.
   * @param opts A bag of options that control this resource's behavior.
   */
  constructor(name: string, args?: ServiceConnectionKubernetesArgs, opts?: pulumi.CustomResourceOptions);
  constructor(
    name: string,
    argsOrState?: ServiceConnectionKubernetesArgs | ServiceConnectionKubernetesState,
    opts?: pulumi.CustomResourceOptions,
  ) {
    let resourceInputs: pulumi.Inputs = {};
    opts = opts || {};
    if (opts.id) {
      const state = argsOrState as ServiceConnectionKubernetesState | undefined;
      resourceInputs["kubeconfig"] = state ? state.kubeconfig : undefined;
      resourceInputs["local"] = state ? state.local : undefined;
      resourceInputs["name"] = state ? state.name : undefined;
      resourceInputs["serviceConnectionKubernetesId"] = state ? state.serviceConnectionKubernetesId : undefined;
      resourceInputs["verifySsl"] = state ? state.verifySsl : undefined;
    } else {
      const args = argsOrState as ServiceConnectionKubernetesArgs | undefined;
      resourceInputs["kubeconfig"] = args?.kubeconfig ? pulumi.secret(args.kubeconfig) : undefined;
      resourceInputs["local"] = args ? args.local : undefined;
      resourceInputs["name"] = args ? args.name : undefined;
      resourceInputs["serviceConnectionKubernetesId"] = args ? args.serviceConnectionKubernetesId : undefined;
      resourceInputs["verifySsl"] = args ? args.verifySsl : undefined;
    }
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
    const secretOpts = { additionalSecretOutputs: ["kubeconfig"] };
    opts = pulumi.mergeOptions(opts, secretOpts);
    super(
      ServiceConnectionKubernetes.__pulumiType,
      name,
      resourceInputs,
      opts,
      false, /*dependency*/
      utilities.getPackage(),
    );
  }
}

/**
 * Input properties used for looking up and filtering ServiceConnectionKubernetes resources.
 */
export interface ServiceConnectionKubernetesState {
  /**
   * JSON format expected. Use jsonencode() to pass objects. Defaults to `{}`.
   */
  kubeconfig?: pulumi.Input<string>;
  /**
   * Defaults to `false`.
   */
  local?: pulumi.Input<boolean>;
  name?: pulumi.Input<string>;
  serviceConnectionKubernetesId?: pulumi.Input<string>;
  /**
   * Defaults to `true`.
   */
  verifySsl?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a ServiceConnectionKubernetes resource.
 */
export interface ServiceConnectionKubernetesArgs {
  /**
   * JSON format expected. Use jsonencode() to pass objects. Defaults to `{}`.
   */
  kubeconfig?: pulumi.Input<string>;
  /**
   * Defaults to `false`.
   */
  local?: pulumi.Input<boolean>;
  name?: pulumi.Input<string>;
  serviceConnectionKubernetesId?: pulumi.Input<string>;
  /**
   * Defaults to `true`.
   */
  verifySsl?: pulumi.Input<boolean>;
}
