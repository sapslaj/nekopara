// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class SourcePlex extends pulumi.CustomResource {
  /**
   * Get an existing SourcePlex resource's state with the given name, ID, and optional extra
   * properties used to qualify the lookup.
   *
   * @param name The _unique_ name of the resulting resource.
   * @param id The _unique_ provider ID of the resource to lookup.
   * @param state Any extra arguments used during the lookup.
   * @param opts Optional settings to control the behavior of the CustomResource.
   */
  public static get(
    name: string,
    id: pulumi.Input<pulumi.ID>,
    state?: SourcePlexState,
    opts?: pulumi.CustomResourceOptions,
  ): SourcePlex {
    return new SourcePlex(name, <any> state, { ...opts, id: id });
  }

  /** @internal */
  public static readonly __pulumiType = "authentik:index/sourcePlex:SourcePlex";

  /**
   * Returns true if the given object is an instance of SourcePlex.  This is designed to work even
   * when multiple copies of the Pulumi SDK have been loaded into the same process.
   */
  public static isInstance(obj: any): obj is SourcePlex {
    if (obj === undefined || obj === null) {
      return false;
    }
    return obj["__pulumiType"] === SourcePlex.__pulumiType;
  }

  /**
   * Defaults to `true`.
   */
  public readonly allowFriends!: pulumi.Output<boolean | undefined>;
  public readonly allowedServers!: pulumi.Output<string[] | undefined>;
  public readonly authenticationFlow!: pulumi.Output<string | undefined>;
  public readonly clientId!: pulumi.Output<string>;
  /**
   * Defaults to `true`.
   */
  public readonly enabled!: pulumi.Output<boolean | undefined>;
  public readonly enrollmentFlow!: pulumi.Output<string | undefined>;
  /**
   * Allowed values: - `identifier` - `name_link` - `name_deny` Defaults to `identifier`.
   */
  public readonly groupMatchingMode!: pulumi.Output<string | undefined>;
  public readonly name!: pulumi.Output<string>;
  public readonly plexToken!: pulumi.Output<string>;
  /**
   * Allowed values: - `all` - `any` Defaults to `any`.
   */
  public readonly policyEngineMode!: pulumi.Output<string | undefined>;
  public readonly slug!: pulumi.Output<string>;
  public readonly sourcePlexId!: pulumi.Output<string>;
  /**
   * Allowed values: - `identifier` - `email_link` - `email_deny` - `username_link` - `username_deny` Defaults to
   * `identifier`.
   */
  public readonly userMatchingMode!: pulumi.Output<string | undefined>;
  /**
   * Defaults to `goauthentik.io/sources/%(slug)s`.
   */
  public readonly userPathTemplate!: pulumi.Output<string | undefined>;
  /**
   * Generated.
   */
  public readonly uuid!: pulumi.Output<string>;

  /**
   * Create a SourcePlex resource with the given unique name, arguments, and options.
   *
   * @param name The _unique_ name of the resource.
   * @param args The arguments to use to populate this resource's properties.
   * @param opts A bag of options that control this resource's behavior.
   */
  constructor(name: string, args: SourcePlexArgs, opts?: pulumi.CustomResourceOptions);
  constructor(name: string, argsOrState?: SourcePlexArgs | SourcePlexState, opts?: pulumi.CustomResourceOptions) {
    let resourceInputs: pulumi.Inputs = {};
    opts = opts || {};
    if (opts.id) {
      const state = argsOrState as SourcePlexState | undefined;
      resourceInputs["allowFriends"] = state ? state.allowFriends : undefined;
      resourceInputs["allowedServers"] = state ? state.allowedServers : undefined;
      resourceInputs["authenticationFlow"] = state ? state.authenticationFlow : undefined;
      resourceInputs["clientId"] = state ? state.clientId : undefined;
      resourceInputs["enabled"] = state ? state.enabled : undefined;
      resourceInputs["enrollmentFlow"] = state ? state.enrollmentFlow : undefined;
      resourceInputs["groupMatchingMode"] = state ? state.groupMatchingMode : undefined;
      resourceInputs["name"] = state ? state.name : undefined;
      resourceInputs["plexToken"] = state ? state.plexToken : undefined;
      resourceInputs["policyEngineMode"] = state ? state.policyEngineMode : undefined;
      resourceInputs["slug"] = state ? state.slug : undefined;
      resourceInputs["sourcePlexId"] = state ? state.sourcePlexId : undefined;
      resourceInputs["userMatchingMode"] = state ? state.userMatchingMode : undefined;
      resourceInputs["userPathTemplate"] = state ? state.userPathTemplate : undefined;
      resourceInputs["uuid"] = state ? state.uuid : undefined;
    } else {
      const args = argsOrState as SourcePlexArgs | undefined;
      if ((!args || args.clientId === undefined) && !opts.urn) {
        throw new Error("Missing required property 'clientId'");
      }
      if ((!args || args.plexToken === undefined) && !opts.urn) {
        throw new Error("Missing required property 'plexToken'");
      }
      if ((!args || args.slug === undefined) && !opts.urn) {
        throw new Error("Missing required property 'slug'");
      }
      resourceInputs["allowFriends"] = args ? args.allowFriends : undefined;
      resourceInputs["allowedServers"] = args ? args.allowedServers : undefined;
      resourceInputs["authenticationFlow"] = args ? args.authenticationFlow : undefined;
      resourceInputs["clientId"] = args ? args.clientId : undefined;
      resourceInputs["enabled"] = args ? args.enabled : undefined;
      resourceInputs["enrollmentFlow"] = args ? args.enrollmentFlow : undefined;
      resourceInputs["groupMatchingMode"] = args ? args.groupMatchingMode : undefined;
      resourceInputs["name"] = args ? args.name : undefined;
      resourceInputs["plexToken"] = args?.plexToken ? pulumi.secret(args.plexToken) : undefined;
      resourceInputs["policyEngineMode"] = args ? args.policyEngineMode : undefined;
      resourceInputs["slug"] = args ? args.slug : undefined;
      resourceInputs["sourcePlexId"] = args ? args.sourcePlexId : undefined;
      resourceInputs["userMatchingMode"] = args ? args.userMatchingMode : undefined;
      resourceInputs["userPathTemplate"] = args ? args.userPathTemplate : undefined;
      resourceInputs["uuid"] = args ? args.uuid : undefined;
    }
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
    const secretOpts = { additionalSecretOutputs: ["plexToken"] };
    opts = pulumi.mergeOptions(opts, secretOpts);
    super(SourcePlex.__pulumiType, name, resourceInputs, opts, false, /*dependency*/ utilities.getPackage());
  }
}

/**
 * Input properties used for looking up and filtering SourcePlex resources.
 */
export interface SourcePlexState {
  /**
   * Defaults to `true`.
   */
  allowFriends?: pulumi.Input<boolean>;
  allowedServers?: pulumi.Input<pulumi.Input<string>[]>;
  authenticationFlow?: pulumi.Input<string>;
  clientId?: pulumi.Input<string>;
  /**
   * Defaults to `true`.
   */
  enabled?: pulumi.Input<boolean>;
  enrollmentFlow?: pulumi.Input<string>;
  /**
   * Allowed values: - `identifier` - `name_link` - `name_deny` Defaults to `identifier`.
   */
  groupMatchingMode?: pulumi.Input<string>;
  name?: pulumi.Input<string>;
  plexToken?: pulumi.Input<string>;
  /**
   * Allowed values: - `all` - `any` Defaults to `any`.
   */
  policyEngineMode?: pulumi.Input<string>;
  slug?: pulumi.Input<string>;
  sourcePlexId?: pulumi.Input<string>;
  /**
   * Allowed values: - `identifier` - `email_link` - `email_deny` - `username_link` - `username_deny` Defaults to
   * `identifier`.
   */
  userMatchingMode?: pulumi.Input<string>;
  /**
   * Defaults to `goauthentik.io/sources/%(slug)s`.
   */
  userPathTemplate?: pulumi.Input<string>;
  /**
   * Generated.
   */
  uuid?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SourcePlex resource.
 */
export interface SourcePlexArgs {
  /**
   * Defaults to `true`.
   */
  allowFriends?: pulumi.Input<boolean>;
  allowedServers?: pulumi.Input<pulumi.Input<string>[]>;
  authenticationFlow?: pulumi.Input<string>;
  clientId: pulumi.Input<string>;
  /**
   * Defaults to `true`.
   */
  enabled?: pulumi.Input<boolean>;
  enrollmentFlow?: pulumi.Input<string>;
  /**
   * Allowed values: - `identifier` - `name_link` - `name_deny` Defaults to `identifier`.
   */
  groupMatchingMode?: pulumi.Input<string>;
  name?: pulumi.Input<string>;
  plexToken: pulumi.Input<string>;
  /**
   * Allowed values: - `all` - `any` Defaults to `any`.
   */
  policyEngineMode?: pulumi.Input<string>;
  slug: pulumi.Input<string>;
  sourcePlexId?: pulumi.Input<string>;
  /**
   * Allowed values: - `identifier` - `email_link` - `email_deny` - `username_link` - `username_deny` Defaults to
   * `identifier`.
   */
  userMatchingMode?: pulumi.Input<string>;
  /**
   * Defaults to `goauthentik.io/sources/%(slug)s`.
   */
  userPathTemplate?: pulumi.Input<string>;
  /**
   * Generated.
   */
  uuid?: pulumi.Input<string>;
}
