// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Outpost extends pulumi.CustomResource {
  /**
   * Get an existing Outpost resource's state with the given name, ID, and optional extra
   * properties used to qualify the lookup.
   *
   * @param name The _unique_ name of the resulting resource.
   * @param id The _unique_ provider ID of the resource to lookup.
   * @param state Any extra arguments used during the lookup.
   * @param opts Optional settings to control the behavior of the CustomResource.
   */
  public static get(
    name: string,
    id: pulumi.Input<pulumi.ID>,
    state?: OutpostState,
    opts?: pulumi.CustomResourceOptions,
  ): Outpost {
    return new Outpost(name, <any> state, { ...opts, id: id });
  }

  /** @internal */
  public static readonly __pulumiType = "authentik:index/outpost:Outpost";

  /**
   * Returns true if the given object is an instance of Outpost.  This is designed to work even
   * when multiple copies of the Pulumi SDK have been loaded into the same process.
   */
  public static isInstance(obj: any): obj is Outpost {
    if (obj === undefined || obj === null) {
      return false;
    }
    return obj["__pulumiType"] === Outpost.__pulumiType;
  }

  /**
   * JSON format expected. Use jsonencode() to pass objects. Generated.
   */
  public readonly config!: pulumi.Output<string>;
  public readonly name!: pulumi.Output<string>;
  public readonly outpostId!: pulumi.Output<string>;
  public readonly protocolProviders!: pulumi.Output<number[]>;
  public readonly serviceConnection!: pulumi.Output<string | undefined>;
  /**
   * Allowed values: - `proxy` - `ldap` - `radius` - `rac` Defaults to `proxy`.
   */
  public readonly type!: pulumi.Output<string | undefined>;

  /**
   * Create a Outpost resource with the given unique name, arguments, and options.
   *
   * @param name The _unique_ name of the resource.
   * @param args The arguments to use to populate this resource's properties.
   * @param opts A bag of options that control this resource's behavior.
   */
  constructor(name: string, args: OutpostArgs, opts?: pulumi.CustomResourceOptions);
  constructor(name: string, argsOrState?: OutpostArgs | OutpostState, opts?: pulumi.CustomResourceOptions) {
    let resourceInputs: pulumi.Inputs = {};
    opts = opts || {};
    if (opts.id) {
      const state = argsOrState as OutpostState | undefined;
      resourceInputs["config"] = state ? state.config : undefined;
      resourceInputs["name"] = state ? state.name : undefined;
      resourceInputs["outpostId"] = state ? state.outpostId : undefined;
      resourceInputs["protocolProviders"] = state ? state.protocolProviders : undefined;
      resourceInputs["serviceConnection"] = state ? state.serviceConnection : undefined;
      resourceInputs["type"] = state ? state.type : undefined;
    } else {
      const args = argsOrState as OutpostArgs | undefined;
      if ((!args || args.protocolProviders === undefined) && !opts.urn) {
        throw new Error("Missing required property 'protocolProviders'");
      }
      resourceInputs["config"] = args ? args.config : undefined;
      resourceInputs["name"] = args ? args.name : undefined;
      resourceInputs["outpostId"] = args ? args.outpostId : undefined;
      resourceInputs["protocolProviders"] = args ? args.protocolProviders : undefined;
      resourceInputs["serviceConnection"] = args ? args.serviceConnection : undefined;
      resourceInputs["type"] = args ? args.type : undefined;
    }
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
    super(Outpost.__pulumiType, name, resourceInputs, opts, false, /*dependency*/ utilities.getPackage());
  }
}

/**
 * Input properties used for looking up and filtering Outpost resources.
 */
export interface OutpostState {
  /**
   * JSON format expected. Use jsonencode() to pass objects. Generated.
   */
  config?: pulumi.Input<string>;
  name?: pulumi.Input<string>;
  outpostId?: pulumi.Input<string>;
  protocolProviders?: pulumi.Input<pulumi.Input<number>[]>;
  serviceConnection?: pulumi.Input<string>;
  /**
   * Allowed values: - `proxy` - `ldap` - `radius` - `rac` Defaults to `proxy`.
   */
  type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Outpost resource.
 */
export interface OutpostArgs {
  /**
   * JSON format expected. Use jsonencode() to pass objects. Generated.
   */
  config?: pulumi.Input<string>;
  name?: pulumi.Input<string>;
  outpostId?: pulumi.Input<string>;
  protocolProviders: pulumi.Input<pulumi.Input<number>[]>;
  serviceConnection?: pulumi.Input<string>;
  /**
   * Allowed values: - `proxy` - `ldap` - `radius` - `rac` Defaults to `proxy`.
   */
  type?: pulumi.Input<string>;
}
