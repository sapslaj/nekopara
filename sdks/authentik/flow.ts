// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Flow extends pulumi.CustomResource {
  /**
   * Get an existing Flow resource's state with the given name, ID, and optional extra
   * properties used to qualify the lookup.
   *
   * @param name The _unique_ name of the resulting resource.
   * @param id The _unique_ provider ID of the resource to lookup.
   * @param state Any extra arguments used during the lookup.
   * @param opts Optional settings to control the behavior of the CustomResource.
   */
  public static get(
    name: string,
    id: pulumi.Input<pulumi.ID>,
    state?: FlowState,
    opts?: pulumi.CustomResourceOptions,
  ): Flow {
    return new Flow(name, <any> state, { ...opts, id: id });
  }

  /** @internal */
  public static readonly __pulumiType = "authentik:index/flow:Flow";

  /**
   * Returns true if the given object is an instance of Flow.  This is designed to work even
   * when multiple copies of the Pulumi SDK have been loaded into the same process.
   */
  public static isInstance(obj: any): obj is Flow {
    if (obj === undefined || obj === null) {
      return false;
    }
    return obj["__pulumiType"] === Flow.__pulumiType;
  }

  /**
   * Allowed values: - `none` - `require_authenticated` - `require_unauthenticated` - `require_superuser` -
   * `require_redirect` - `require_outpost` Defaults to `none`.
   */
  public readonly authentication!: pulumi.Output<string | undefined>;
  /**
   * Optional URL to an image which will be used as the background during the flow.
   */
  public readonly background!: pulumi.Output<string | undefined>;
  /**
   * Defaults to `true`.
   */
  public readonly compatibilityMode!: pulumi.Output<boolean | undefined>;
  /**
   * Defaults to `message_continue`.
   */
  public readonly deniedAction!: pulumi.Output<string | undefined>;
  /**
   * Allowed values: - `authentication` - `authorization` - `invalidation` - `enrollment` - `unenrollment` - `recovery` -
   * `stage_configuration`
   */
  public readonly designation!: pulumi.Output<string>;
  public readonly flowId!: pulumi.Output<string>;
  /**
   * Allowed values: - `stacked` - `content_left` - `content_right` - `sidebar_left` - `sidebar_right` Defaults to `stacked`.
   */
  public readonly layout!: pulumi.Output<string | undefined>;
  public readonly name!: pulumi.Output<string>;
  /**
   * Allowed values: - `all` - `any` Defaults to `any`.
   */
  public readonly policyEngineMode!: pulumi.Output<string | undefined>;
  public readonly slug!: pulumi.Output<string>;
  public readonly title!: pulumi.Output<string>;
  /**
   * Generated.
   */
  public readonly /*out*/ uuid!: pulumi.Output<string>;

  /**
   * Create a Flow resource with the given unique name, arguments, and options.
   *
   * @param name The _unique_ name of the resource.
   * @param args The arguments to use to populate this resource's properties.
   * @param opts A bag of options that control this resource's behavior.
   */
  constructor(name: string, args: FlowArgs, opts?: pulumi.CustomResourceOptions);
  constructor(name: string, argsOrState?: FlowArgs | FlowState, opts?: pulumi.CustomResourceOptions) {
    let resourceInputs: pulumi.Inputs = {};
    opts = opts || {};
    if (opts.id) {
      const state = argsOrState as FlowState | undefined;
      resourceInputs["authentication"] = state ? state.authentication : undefined;
      resourceInputs["background"] = state ? state.background : undefined;
      resourceInputs["compatibilityMode"] = state ? state.compatibilityMode : undefined;
      resourceInputs["deniedAction"] = state ? state.deniedAction : undefined;
      resourceInputs["designation"] = state ? state.designation : undefined;
      resourceInputs["flowId"] = state ? state.flowId : undefined;
      resourceInputs["layout"] = state ? state.layout : undefined;
      resourceInputs["name"] = state ? state.name : undefined;
      resourceInputs["policyEngineMode"] = state ? state.policyEngineMode : undefined;
      resourceInputs["slug"] = state ? state.slug : undefined;
      resourceInputs["title"] = state ? state.title : undefined;
      resourceInputs["uuid"] = state ? state.uuid : undefined;
    } else {
      const args = argsOrState as FlowArgs | undefined;
      if ((!args || args.designation === undefined) && !opts.urn) {
        throw new Error("Missing required property 'designation'");
      }
      if ((!args || args.slug === undefined) && !opts.urn) {
        throw new Error("Missing required property 'slug'");
      }
      if ((!args || args.title === undefined) && !opts.urn) {
        throw new Error("Missing required property 'title'");
      }
      resourceInputs["authentication"] = args ? args.authentication : undefined;
      resourceInputs["background"] = args ? args.background : undefined;
      resourceInputs["compatibilityMode"] = args ? args.compatibilityMode : undefined;
      resourceInputs["deniedAction"] = args ? args.deniedAction : undefined;
      resourceInputs["designation"] = args ? args.designation : undefined;
      resourceInputs["flowId"] = args ? args.flowId : undefined;
      resourceInputs["layout"] = args ? args.layout : undefined;
      resourceInputs["name"] = args ? args.name : undefined;
      resourceInputs["policyEngineMode"] = args ? args.policyEngineMode : undefined;
      resourceInputs["slug"] = args ? args.slug : undefined;
      resourceInputs["title"] = args ? args.title : undefined;
      resourceInputs["uuid"] = undefined /*out*/;
    }
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
    super(Flow.__pulumiType, name, resourceInputs, opts, false, /*dependency*/ utilities.getPackage());
  }
}

/**
 * Input properties used for looking up and filtering Flow resources.
 */
export interface FlowState {
  /**
   * Allowed values: - `none` - `require_authenticated` - `require_unauthenticated` - `require_superuser` -
   * `require_redirect` - `require_outpost` Defaults to `none`.
   */
  authentication?: pulumi.Input<string>;
  /**
   * Optional URL to an image which will be used as the background during the flow.
   */
  background?: pulumi.Input<string>;
  /**
   * Defaults to `true`.
   */
  compatibilityMode?: pulumi.Input<boolean>;
  /**
   * Defaults to `message_continue`.
   */
  deniedAction?: pulumi.Input<string>;
  /**
   * Allowed values: - `authentication` - `authorization` - `invalidation` - `enrollment` - `unenrollment` - `recovery` -
   * `stage_configuration`
   */
  designation?: pulumi.Input<string>;
  flowId?: pulumi.Input<string>;
  /**
   * Allowed values: - `stacked` - `content_left` - `content_right` - `sidebar_left` - `sidebar_right` Defaults to `stacked`.
   */
  layout?: pulumi.Input<string>;
  name?: pulumi.Input<string>;
  /**
   * Allowed values: - `all` - `any` Defaults to `any`.
   */
  policyEngineMode?: pulumi.Input<string>;
  slug?: pulumi.Input<string>;
  title?: pulumi.Input<string>;
  /**
   * Generated.
   */
  uuid?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Flow resource.
 */
export interface FlowArgs {
  /**
   * Allowed values: - `none` - `require_authenticated` - `require_unauthenticated` - `require_superuser` -
   * `require_redirect` - `require_outpost` Defaults to `none`.
   */
  authentication?: pulumi.Input<string>;
  /**
   * Optional URL to an image which will be used as the background during the flow.
   */
  background?: pulumi.Input<string>;
  /**
   * Defaults to `true`.
   */
  compatibilityMode?: pulumi.Input<boolean>;
  /**
   * Defaults to `message_continue`.
   */
  deniedAction?: pulumi.Input<string>;
  /**
   * Allowed values: - `authentication` - `authorization` - `invalidation` - `enrollment` - `unenrollment` - `recovery` -
   * `stage_configuration`
   */
  designation: pulumi.Input<string>;
  flowId?: pulumi.Input<string>;
  /**
   * Allowed values: - `stacked` - `content_left` - `content_right` - `sidebar_left` - `sidebar_right` Defaults to `stacked`.
   */
  layout?: pulumi.Input<string>;
  name?: pulumi.Input<string>;
  /**
   * Allowed values: - `all` - `any` Defaults to `any`.
   */
  policyEngineMode?: pulumi.Input<string>;
  slug: pulumi.Input<string>;
  title: pulumi.Input<string>;
}
