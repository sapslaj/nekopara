// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class RacEndpoint extends pulumi.CustomResource {
  /**
   * Get an existing RacEndpoint resource's state with the given name, ID, and optional extra
   * properties used to qualify the lookup.
   *
   * @param name The _unique_ name of the resulting resource.
   * @param id The _unique_ provider ID of the resource to lookup.
   * @param state Any extra arguments used during the lookup.
   * @param opts Optional settings to control the behavior of the CustomResource.
   */
  public static get(
    name: string,
    id: pulumi.Input<pulumi.ID>,
    state?: RacEndpointState,
    opts?: pulumi.CustomResourceOptions,
  ): RacEndpoint {
    return new RacEndpoint(name, <any> state, { ...opts, id: id });
  }

  /** @internal */
  public static readonly __pulumiType = "authentik:index/racEndpoint:RacEndpoint";

  /**
   * Returns true if the given object is an instance of RacEndpoint.  This is designed to work even
   * when multiple copies of the Pulumi SDK have been loaded into the same process.
   */
  public static isInstance(obj: any): obj is RacEndpoint {
    if (obj === undefined || obj === null) {
      return false;
    }
    return obj["__pulumiType"] === RacEndpoint.__pulumiType;
  }

  public readonly host!: pulumi.Output<string>;
  /**
   * Defaults to `0`.
   */
  public readonly maximumConnections!: pulumi.Output<number | undefined>;
  public readonly name!: pulumi.Output<string>;
  public readonly propertyMappings!: pulumi.Output<string[] | undefined>;
  /**
   * Allowed values: - `rdp` - `vnc` - `ssh`
   */
  public readonly protocol!: pulumi.Output<string>;
  public readonly protocolProvider!: pulumi.Output<number>;
  public readonly racEndpointId!: pulumi.Output<string>;
  /**
   * JSON format expected. Use jsonencode() to pass objects. Defaults to `{}`.
   */
  public readonly settings!: pulumi.Output<string | undefined>;

  /**
   * Create a RacEndpoint resource with the given unique name, arguments, and options.
   *
   * @param name The _unique_ name of the resource.
   * @param args The arguments to use to populate this resource's properties.
   * @param opts A bag of options that control this resource's behavior.
   */
  constructor(name: string, args: RacEndpointArgs, opts?: pulumi.CustomResourceOptions);
  constructor(name: string, argsOrState?: RacEndpointArgs | RacEndpointState, opts?: pulumi.CustomResourceOptions) {
    let resourceInputs: pulumi.Inputs = {};
    opts = opts || {};
    if (opts.id) {
      const state = argsOrState as RacEndpointState | undefined;
      resourceInputs["host"] = state ? state.host : undefined;
      resourceInputs["maximumConnections"] = state ? state.maximumConnections : undefined;
      resourceInputs["name"] = state ? state.name : undefined;
      resourceInputs["propertyMappings"] = state ? state.propertyMappings : undefined;
      resourceInputs["protocol"] = state ? state.protocol : undefined;
      resourceInputs["protocolProvider"] = state ? state.protocolProvider : undefined;
      resourceInputs["racEndpointId"] = state ? state.racEndpointId : undefined;
      resourceInputs["settings"] = state ? state.settings : undefined;
    } else {
      const args = argsOrState as RacEndpointArgs | undefined;
      if ((!args || args.host === undefined) && !opts.urn) {
        throw new Error("Missing required property 'host'");
      }
      if ((!args || args.protocol === undefined) && !opts.urn) {
        throw new Error("Missing required property 'protocol'");
      }
      if ((!args || args.protocolProvider === undefined) && !opts.urn) {
        throw new Error("Missing required property 'protocolProvider'");
      }
      resourceInputs["host"] = args ? args.host : undefined;
      resourceInputs["maximumConnections"] = args ? args.maximumConnections : undefined;
      resourceInputs["name"] = args ? args.name : undefined;
      resourceInputs["propertyMappings"] = args ? args.propertyMappings : undefined;
      resourceInputs["protocol"] = args ? args.protocol : undefined;
      resourceInputs["protocolProvider"] = args ? args.protocolProvider : undefined;
      resourceInputs["racEndpointId"] = args ? args.racEndpointId : undefined;
      resourceInputs["settings"] = args ? args.settings : undefined;
    }
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
    super(RacEndpoint.__pulumiType, name, resourceInputs, opts, false, /*dependency*/ utilities.getPackage());
  }
}

/**
 * Input properties used for looking up and filtering RacEndpoint resources.
 */
export interface RacEndpointState {
  host?: pulumi.Input<string>;
  /**
   * Defaults to `0`.
   */
  maximumConnections?: pulumi.Input<number>;
  name?: pulumi.Input<string>;
  propertyMappings?: pulumi.Input<pulumi.Input<string>[]>;
  /**
   * Allowed values: - `rdp` - `vnc` - `ssh`
   */
  protocol?: pulumi.Input<string>;
  protocolProvider?: pulumi.Input<number>;
  racEndpointId?: pulumi.Input<string>;
  /**
   * JSON format expected. Use jsonencode() to pass objects. Defaults to `{}`.
   */
  settings?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a RacEndpoint resource.
 */
export interface RacEndpointArgs {
  host: pulumi.Input<string>;
  /**
   * Defaults to `0`.
   */
  maximumConnections?: pulumi.Input<number>;
  name?: pulumi.Input<string>;
  propertyMappings?: pulumi.Input<pulumi.Input<string>[]>;
  /**
   * Allowed values: - `rdp` - `vnc` - `ssh`
   */
  protocol: pulumi.Input<string>;
  protocolProvider: pulumi.Input<number>;
  racEndpointId?: pulumi.Input<string>;
  /**
   * JSON format expected. Use jsonencode() to pass objects. Defaults to `{}`.
   */
  settings?: pulumi.Input<string>;
}
