// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class PolicyBinding extends pulumi.CustomResource {
  /**
   * Get an existing PolicyBinding resource's state with the given name, ID, and optional extra
   * properties used to qualify the lookup.
   *
   * @param name The _unique_ name of the resulting resource.
   * @param id The _unique_ provider ID of the resource to lookup.
   * @param state Any extra arguments used during the lookup.
   * @param opts Optional settings to control the behavior of the CustomResource.
   */
  public static get(
    name: string,
    id: pulumi.Input<pulumi.ID>,
    state?: PolicyBindingState,
    opts?: pulumi.CustomResourceOptions,
  ): PolicyBinding {
    return new PolicyBinding(name, <any> state, { ...opts, id: id });
  }

  /** @internal */
  public static readonly __pulumiType = "authentik:index/policyBinding:PolicyBinding";

  /**
   * Returns true if the given object is an instance of PolicyBinding.  This is designed to work even
   * when multiple copies of the Pulumi SDK have been loaded into the same process.
   */
  public static isInstance(obj: any): obj is PolicyBinding {
    if (obj === undefined || obj === null) {
      return false;
    }
    return obj["__pulumiType"] === PolicyBinding.__pulumiType;
  }

  /**
   * Defaults to `true`.
   */
  public readonly enabled!: pulumi.Output<boolean | undefined>;
  /**
   * Defaults to `false`.
   */
  public readonly failureResult!: pulumi.Output<boolean | undefined>;
  /**
   * UUID of the group
   */
  public readonly group!: pulumi.Output<string | undefined>;
  /**
   * Defaults to `false`.
   */
  public readonly negate!: pulumi.Output<boolean | undefined>;
  public readonly order!: pulumi.Output<number>;
  /**
   * UUID of the policy
   */
  public readonly policy!: pulumi.Output<string | undefined>;
  public readonly policyBindingId!: pulumi.Output<string>;
  /**
   * ID of the object this binding should apply to
   */
  public readonly target!: pulumi.Output<string>;
  /**
   * Defaults to `30`.
   */
  public readonly timeout!: pulumi.Output<number | undefined>;
  /**
   * PK of the user
   */
  public readonly user!: pulumi.Output<number | undefined>;

  /**
   * Create a PolicyBinding resource with the given unique name, arguments, and options.
   *
   * @param name The _unique_ name of the resource.
   * @param args The arguments to use to populate this resource's properties.
   * @param opts A bag of options that control this resource's behavior.
   */
  constructor(name: string, args: PolicyBindingArgs, opts?: pulumi.CustomResourceOptions);
  constructor(name: string, argsOrState?: PolicyBindingArgs | PolicyBindingState, opts?: pulumi.CustomResourceOptions) {
    let resourceInputs: pulumi.Inputs = {};
    opts = opts || {};
    if (opts.id) {
      const state = argsOrState as PolicyBindingState | undefined;
      resourceInputs["enabled"] = state ? state.enabled : undefined;
      resourceInputs["failureResult"] = state ? state.failureResult : undefined;
      resourceInputs["group"] = state ? state.group : undefined;
      resourceInputs["negate"] = state ? state.negate : undefined;
      resourceInputs["order"] = state ? state.order : undefined;
      resourceInputs["policy"] = state ? state.policy : undefined;
      resourceInputs["policyBindingId"] = state ? state.policyBindingId : undefined;
      resourceInputs["target"] = state ? state.target : undefined;
      resourceInputs["timeout"] = state ? state.timeout : undefined;
      resourceInputs["user"] = state ? state.user : undefined;
    } else {
      const args = argsOrState as PolicyBindingArgs | undefined;
      if ((!args || args.order === undefined) && !opts.urn) {
        throw new Error("Missing required property 'order'");
      }
      if ((!args || args.target === undefined) && !opts.urn) {
        throw new Error("Missing required property 'target'");
      }
      resourceInputs["enabled"] = args ? args.enabled : undefined;
      resourceInputs["failureResult"] = args ? args.failureResult : undefined;
      resourceInputs["group"] = args ? args.group : undefined;
      resourceInputs["negate"] = args ? args.negate : undefined;
      resourceInputs["order"] = args ? args.order : undefined;
      resourceInputs["policy"] = args ? args.policy : undefined;
      resourceInputs["policyBindingId"] = args ? args.policyBindingId : undefined;
      resourceInputs["target"] = args ? args.target : undefined;
      resourceInputs["timeout"] = args ? args.timeout : undefined;
      resourceInputs["user"] = args ? args.user : undefined;
    }
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
    super(PolicyBinding.__pulumiType, name, resourceInputs, opts, false, /*dependency*/ utilities.getPackage());
  }
}

/**
 * Input properties used for looking up and filtering PolicyBinding resources.
 */
export interface PolicyBindingState {
  /**
   * Defaults to `true`.
   */
  enabled?: pulumi.Input<boolean>;
  /**
   * Defaults to `false`.
   */
  failureResult?: pulumi.Input<boolean>;
  /**
   * UUID of the group
   */
  group?: pulumi.Input<string>;
  /**
   * Defaults to `false`.
   */
  negate?: pulumi.Input<boolean>;
  order?: pulumi.Input<number>;
  /**
   * UUID of the policy
   */
  policy?: pulumi.Input<string>;
  policyBindingId?: pulumi.Input<string>;
  /**
   * ID of the object this binding should apply to
   */
  target?: pulumi.Input<string>;
  /**
   * Defaults to `30`.
   */
  timeout?: pulumi.Input<number>;
  /**
   * PK of the user
   */
  user?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a PolicyBinding resource.
 */
export interface PolicyBindingArgs {
  /**
   * Defaults to `true`.
   */
  enabled?: pulumi.Input<boolean>;
  /**
   * Defaults to `false`.
   */
  failureResult?: pulumi.Input<boolean>;
  /**
   * UUID of the group
   */
  group?: pulumi.Input<string>;
  /**
   * Defaults to `false`.
   */
  negate?: pulumi.Input<boolean>;
  order: pulumi.Input<number>;
  /**
   * UUID of the policy
   */
  policy?: pulumi.Input<string>;
  policyBindingId?: pulumi.Input<string>;
  /**
   * ID of the object this binding should apply to
   */
  target: pulumi.Input<string>;
  /**
   * Defaults to `30`.
   */
  timeout?: pulumi.Input<number>;
  /**
   * PK of the user
   */
  user?: pulumi.Input<number>;
}
