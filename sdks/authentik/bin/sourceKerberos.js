"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.SourceKerberos = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
class SourceKerberos extends pulumi.CustomResource {
    /**
     * Get an existing SourceKerberos resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new SourceKerberos(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of SourceKerberos.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SourceKerberos.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["authenticationFlow"] = state ? state.authenticationFlow : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["enrollmentFlow"] = state ? state.enrollmentFlow : undefined;
            resourceInputs["groupMatchingMode"] = state ? state.groupMatchingMode : undefined;
            resourceInputs["krb5Conf"] = state ? state.krb5Conf : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["passwordLoginUpdateInternalPassword"] = state ? state.passwordLoginUpdateInternalPassword : undefined;
            resourceInputs["policyEngineMode"] = state ? state.policyEngineMode : undefined;
            resourceInputs["realm"] = state ? state.realm : undefined;
            resourceInputs["slug"] = state ? state.slug : undefined;
            resourceInputs["sourceKerberosId"] = state ? state.sourceKerberosId : undefined;
            resourceInputs["spnegoCcache"] = state ? state.spnegoCcache : undefined;
            resourceInputs["spnegoKeytab"] = state ? state.spnegoKeytab : undefined;
            resourceInputs["spnegoServerName"] = state ? state.spnegoServerName : undefined;
            resourceInputs["syncCcache"] = state ? state.syncCcache : undefined;
            resourceInputs["syncKeytab"] = state ? state.syncKeytab : undefined;
            resourceInputs["syncPassword"] = state ? state.syncPassword : undefined;
            resourceInputs["syncPrincipal"] = state ? state.syncPrincipal : undefined;
            resourceInputs["syncUsers"] = state ? state.syncUsers : undefined;
            resourceInputs["syncUsersPassword"] = state ? state.syncUsersPassword : undefined;
            resourceInputs["userMatchingMode"] = state ? state.userMatchingMode : undefined;
            resourceInputs["userPathTemplate"] = state ? state.userPathTemplate : undefined;
            resourceInputs["uuid"] = state ? state.uuid : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.realm === undefined) && !opts.urn) {
                throw new Error("Missing required property 'realm'");
            }
            if ((!args || args.slug === undefined) && !opts.urn) {
                throw new Error("Missing required property 'slug'");
            }
            resourceInputs["authenticationFlow"] = args ? args.authenticationFlow : undefined;
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["enrollmentFlow"] = args ? args.enrollmentFlow : undefined;
            resourceInputs["groupMatchingMode"] = args ? args.groupMatchingMode : undefined;
            resourceInputs["krb5Conf"] = args ? args.krb5Conf : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["passwordLoginUpdateInternalPassword"] = args ? args.passwordLoginUpdateInternalPassword : undefined;
            resourceInputs["policyEngineMode"] = args ? args.policyEngineMode : undefined;
            resourceInputs["realm"] = args ? args.realm : undefined;
            resourceInputs["slug"] = args ? args.slug : undefined;
            resourceInputs["sourceKerberosId"] = args ? args.sourceKerberosId : undefined;
            resourceInputs["spnegoCcache"] = args ? args.spnegoCcache : undefined;
            resourceInputs["spnegoKeytab"] = (args === null || args === void 0 ? void 0 : args.spnegoKeytab) ? pulumi.secret(args.spnegoKeytab) : undefined;
            resourceInputs["spnegoServerName"] = args ? args.spnegoServerName : undefined;
            resourceInputs["syncCcache"] = args ? args.syncCcache : undefined;
            resourceInputs["syncKeytab"] = (args === null || args === void 0 ? void 0 : args.syncKeytab) ? pulumi.secret(args.syncKeytab) : undefined;
            resourceInputs["syncPassword"] = (args === null || args === void 0 ? void 0 : args.syncPassword) ? pulumi.secret(args.syncPassword) : undefined;
            resourceInputs["syncPrincipal"] = args ? args.syncPrincipal : undefined;
            resourceInputs["syncUsers"] = args ? args.syncUsers : undefined;
            resourceInputs["syncUsersPassword"] = args ? args.syncUsersPassword : undefined;
            resourceInputs["userMatchingMode"] = args ? args.userMatchingMode : undefined;
            resourceInputs["userPathTemplate"] = args ? args.userPathTemplate : undefined;
            resourceInputs["uuid"] = args ? args.uuid : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["spnegoKeytab", "syncKeytab", "syncPassword"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(SourceKerberos.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}
exports.SourceKerberos = SourceKerberos;
/** @internal */
SourceKerberos.__pulumiType = 'authentik:index/sourceKerberos:SourceKerberos';
//# sourceMappingURL=sourceKerberos.js.map