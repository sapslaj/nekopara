"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.StageIdentification = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
class StageIdentification extends pulumi.CustomResource {
    /**
     * Get an existing StageIdentification resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new StageIdentification(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of StageIdentification.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === StageIdentification.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["captchaStage"] = state ? state.captchaStage : undefined;
            resourceInputs["caseInsensitiveMatching"] = state ? state.caseInsensitiveMatching : undefined;
            resourceInputs["enableRememberMe"] = state ? state.enableRememberMe : undefined;
            resourceInputs["enrollmentFlow"] = state ? state.enrollmentFlow : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["passwordStage"] = state ? state.passwordStage : undefined;
            resourceInputs["passwordlessFlow"] = state ? state.passwordlessFlow : undefined;
            resourceInputs["pretendUserExists"] = state ? state.pretendUserExists : undefined;
            resourceInputs["recoveryFlow"] = state ? state.recoveryFlow : undefined;
            resourceInputs["showMatchedUser"] = state ? state.showMatchedUser : undefined;
            resourceInputs["showSourceLabels"] = state ? state.showSourceLabels : undefined;
            resourceInputs["sources"] = state ? state.sources : undefined;
            resourceInputs["stageIdentificationId"] = state ? state.stageIdentificationId : undefined;
            resourceInputs["userFields"] = state ? state.userFields : undefined;
        }
        else {
            const args = argsOrState;
            resourceInputs["captchaStage"] = args ? args.captchaStage : undefined;
            resourceInputs["caseInsensitiveMatching"] = args ? args.caseInsensitiveMatching : undefined;
            resourceInputs["enableRememberMe"] = args ? args.enableRememberMe : undefined;
            resourceInputs["enrollmentFlow"] = args ? args.enrollmentFlow : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["passwordStage"] = args ? args.passwordStage : undefined;
            resourceInputs["passwordlessFlow"] = args ? args.passwordlessFlow : undefined;
            resourceInputs["pretendUserExists"] = args ? args.pretendUserExists : undefined;
            resourceInputs["recoveryFlow"] = args ? args.recoveryFlow : undefined;
            resourceInputs["showMatchedUser"] = args ? args.showMatchedUser : undefined;
            resourceInputs["showSourceLabels"] = args ? args.showSourceLabels : undefined;
            resourceInputs["sources"] = args ? args.sources : undefined;
            resourceInputs["stageIdentificationId"] = args ? args.stageIdentificationId : undefined;
            resourceInputs["userFields"] = args ? args.userFields : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(StageIdentification.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}
exports.StageIdentification = StageIdentification;
/** @internal */
StageIdentification.__pulumiType = 'authentik:index/stageIdentification:StageIdentification';
//# sourceMappingURL=stageIdentification.js.map