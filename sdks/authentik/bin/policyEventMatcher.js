"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.PolicyEventMatcher = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
class PolicyEventMatcher extends pulumi.CustomResource {
    /**
     * Get an existing PolicyEventMatcher resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new PolicyEventMatcher(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of PolicyEventMatcher.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === PolicyEventMatcher.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["action"] = state ? state.action : undefined;
            resourceInputs["app"] = state ? state.app : undefined;
            resourceInputs["clientIp"] = state ? state.clientIp : undefined;
            resourceInputs["executionLogging"] = state ? state.executionLogging : undefined;
            resourceInputs["model"] = state ? state.model : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["policyEventMatcherId"] = state ? state.policyEventMatcherId : undefined;
        }
        else {
            const args = argsOrState;
            resourceInputs["action"] = args ? args.action : undefined;
            resourceInputs["app"] = args ? args.app : undefined;
            resourceInputs["clientIp"] = args ? args.clientIp : undefined;
            resourceInputs["executionLogging"] = args ? args.executionLogging : undefined;
            resourceInputs["model"] = args ? args.model : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["policyEventMatcherId"] = args ? args.policyEventMatcherId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(PolicyEventMatcher.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}
exports.PolicyEventMatcher = PolicyEventMatcher;
/** @internal */
PolicyEventMatcher.__pulumiType = 'authentik:index/policyEventMatcher:PolicyEventMatcher';
//# sourceMappingURL=policyEventMatcher.js.map