"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.StageAuthenticatorSms = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
class StageAuthenticatorSms extends pulumi.CustomResource {
  /**
   * Get an existing StageAuthenticatorSms resource's state with the given name, ID, and optional extra
   * properties used to qualify the lookup.
   *
   * @param name The _unique_ name of the resulting resource.
   * @param id The _unique_ provider ID of the resource to lookup.
   * @param state Any extra arguments used during the lookup.
   * @param opts Optional settings to control the behavior of the CustomResource.
   */
  static get(name, id, state, opts) {
    return new StageAuthenticatorSms(name, state, Object.assign(Object.assign({}, opts), { id: id }));
  }
  /**
   * Returns true if the given object is an instance of StageAuthenticatorSms.  This is designed to work even
   * when multiple copies of the Pulumi SDK have been loaded into the same process.
   */
  static isInstance(obj) {
    if (obj === undefined || obj === null) {
      return false;
    }
    return obj["__pulumiType"] === StageAuthenticatorSms.__pulumiType;
  }
  constructor(name, argsOrState, opts) {
    let resourceInputs = {};
    opts = opts || {};
    if (opts.id) {
      const state = argsOrState;
      resourceInputs["accountSid"] = state ? state.accountSid : undefined;
      resourceInputs["auth"] = state ? state.auth : undefined;
      resourceInputs["authPassword"] = state ? state.authPassword : undefined;
      resourceInputs["authType"] = state ? state.authType : undefined;
      resourceInputs["configureFlow"] = state ? state.configureFlow : undefined;
      resourceInputs["friendlyName"] = state ? state.friendlyName : undefined;
      resourceInputs["fromNumber"] = state ? state.fromNumber : undefined;
      resourceInputs["mapping"] = state ? state.mapping : undefined;
      resourceInputs["name"] = state ? state.name : undefined;
      resourceInputs["smsProvider"] = state ? state.smsProvider : undefined;
      resourceInputs["stageAuthenticatorSmsId"] = state ? state.stageAuthenticatorSmsId : undefined;
      resourceInputs["verifyOnly"] = state ? state.verifyOnly : undefined;
    } else {
      const args = argsOrState;
      if ((!args || args.accountSid === undefined) && !opts.urn) {
        throw new Error("Missing required property 'accountSid'");
      }
      if ((!args || args.auth === undefined) && !opts.urn) {
        throw new Error("Missing required property 'auth'");
      }
      if ((!args || args.fromNumber === undefined) && !opts.urn) {
        throw new Error("Missing required property 'fromNumber'");
      }
      resourceInputs["accountSid"] = (args === null || args === void 0 ? void 0 : args.accountSid)
        ? pulumi.secret(args.accountSid)
        : undefined;
      resourceInputs["auth"] = (args === null || args === void 0 ? void 0 : args.auth)
        ? pulumi.secret(args.auth)
        : undefined;
      resourceInputs["authPassword"] = (args === null || args === void 0 ? void 0 : args.authPassword)
        ? pulumi.secret(args.authPassword)
        : undefined;
      resourceInputs["authType"] = args ? args.authType : undefined;
      resourceInputs["configureFlow"] = args ? args.configureFlow : undefined;
      resourceInputs["friendlyName"] = args ? args.friendlyName : undefined;
      resourceInputs["fromNumber"] = args ? args.fromNumber : undefined;
      resourceInputs["mapping"] = args ? args.mapping : undefined;
      resourceInputs["name"] = args ? args.name : undefined;
      resourceInputs["smsProvider"] = args ? args.smsProvider : undefined;
      resourceInputs["stageAuthenticatorSmsId"] = args ? args.stageAuthenticatorSmsId : undefined;
      resourceInputs["verifyOnly"] = args ? args.verifyOnly : undefined;
    }
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
    const secretOpts = { additionalSecretOutputs: ["accountSid", "auth", "authPassword"] };
    opts = pulumi.mergeOptions(opts, secretOpts);
    super(StageAuthenticatorSms.__pulumiType, name, resourceInputs, opts, false, /*dependency*/ utilities.getPackage());
  }
}
exports.StageAuthenticatorSms = StageAuthenticatorSms;
/** @internal */
StageAuthenticatorSms.__pulumiType = "authentik:index/stageAuthenticatorSms:StageAuthenticatorSms";
// # sourceMappingURL=stageAuthenticatorSms.js.map
