"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getWebauthnDeviceTypeOutput = exports.getWebauthnDeviceType = exports.getUsersOutput = exports.getUsers = exports.getUserOutput = exports.getUser = exports.getStageOutput = exports.getStage = exports.getSourceOutput = exports.getSource = exports.getServiceConnectionKubernetesOutput = exports.getServiceConnectionKubernetes = exports.getRbacPermissionOutput = exports.getRbacPermission = exports.getProviderSamlMetadataOutput = exports.getProviderSamlMetadata = exports.getProviderOauth2ConfigOutput = exports.getProviderOauth2Config = exports.getPropertyMappingSourceLdapOutput = exports.getPropertyMappingSourceLdap = exports.getPropertyMappingProviderScopeOutput = exports.getPropertyMappingProviderScope = exports.getPropertyMappingProviderScimOutput = exports.getPropertyMappingProviderScim = exports.getPropertyMappingProviderSamlOutput = exports.getPropertyMappingProviderSaml = exports.getPropertyMappingProviderRadiusOutput = exports.getPropertyMappingProviderRadius = exports.getPropertyMappingProviderRacOutput = exports.getPropertyMappingProviderRac = exports.getGroupsOutput = exports.getGroups = exports.getGroupOutput = exports.getGroup = exports.getFlowOutput = exports.getFlow = exports.getCertificateKeyPairOutput = exports.getCertificateKeyPair = exports.getBrandOutput = exports.getBrand = exports.FlowStageBinding = exports.Flow = exports.EventTransport = exports.EventRule = exports.EnterpriseLicense = exports.CertificateKeyPair = exports.Brand = exports.Blueprint = exports.ApplicationEntitlement = exports.Application = void 0;
exports.ServiceConnectionKubernetes = exports.ServiceConnectionDocker = exports.ScopeMapping = exports.RbacRole = exports.RbacPermissionUser = exports.RbacPermissionRole = exports.RbacInitialPermissions = exports.RacEndpoint = exports.ProviderSsf = exports.ProviderScim = exports.ProviderSaml = exports.ProviderRadius = exports.ProviderRac = exports.ProviderProxy = exports.ProviderOauth2 = exports.ProviderMicrosoftEntra = exports.ProviderLdap = exports.ProviderGoogleWorkspace = exports.PropertyMappingSourceScim = exports.PropertyMappingSourceSaml = exports.PropertyMappingSourcePlex = exports.PropertyMappingSourceOauth = exports.PropertyMappingSourceLdap = exports.PropertyMappingSourceKerberos = exports.PropertyMappingScim = exports.PropertyMappingSaml = exports.PropertyMappingRadius = exports.PropertyMappingRac = exports.PropertyMappingProviderScope = exports.PropertyMappingProviderScim = exports.PropertyMappingProviderSaml = exports.PropertyMappingProviderRadius = exports.PropertyMappingProviderRac = exports.PropertyMappingProviderMicrosoftEntra = exports.PropertyMappingProviderGoogleWorkspace = exports.PropertyMappingNotification = exports.PropertyMappingMicrosoftEntra = exports.PropertyMappingLdap = exports.PropertyMappingGoogleWorkspace = exports.PolicyUniquePassword = exports.PolicyReputation = exports.PolicyPassword = exports.PolicyGeoip = exports.PolicyExpression = exports.PolicyExpiry = exports.PolicyEventMatcher = exports.PolicyDummy = exports.PolicyBinding = exports.Outpost = exports.Group = void 0;
exports.types = exports.config = exports.User = exports.Token = exports.SystemSettings = exports.StageUserWrite = exports.StageUserLogout = exports.StageUserLogin = exports.StageUserDelete = exports.StageSource = exports.StageRedirect = exports.StagePromptField = exports.StagePrompt = exports.StagePassword = exports.StageMutualTls = exports.StageInvitation = exports.StageIdentification = exports.StageEmail = exports.StageDummy = exports.StageDeny = exports.StageConsent = exports.StageCaptcha = exports.StageAuthenticatorWebauthn = exports.StageAuthenticatorValidate = exports.StageAuthenticatorTotp = exports.StageAuthenticatorStatic = exports.StageAuthenticatorSms = exports.StageAuthenticatorEndpointGdtc = exports.StageAuthenticatorEmail = exports.StageAuthenticatorDuo = exports.SourceSaml = exports.SourcePlex = exports.SourceOauth = exports.SourceLdap = exports.SourceKerberos = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
exports.Application = null;
utilities.lazyLoad(exports, ["Application"], () => require("./application"));
exports.ApplicationEntitlement = null;
utilities.lazyLoad(exports, ["ApplicationEntitlement"], () => require("./applicationEntitlement"));
exports.Blueprint = null;
utilities.lazyLoad(exports, ["Blueprint"], () => require("./blueprint"));
exports.Brand = null;
utilities.lazyLoad(exports, ["Brand"], () => require("./brand"));
exports.CertificateKeyPair = null;
utilities.lazyLoad(exports, ["CertificateKeyPair"], () => require("./certificateKeyPair"));
exports.EnterpriseLicense = null;
utilities.lazyLoad(exports, ["EnterpriseLicense"], () => require("./enterpriseLicense"));
exports.EventRule = null;
utilities.lazyLoad(exports, ["EventRule"], () => require("./eventRule"));
exports.EventTransport = null;
utilities.lazyLoad(exports, ["EventTransport"], () => require("./eventTransport"));
exports.Flow = null;
utilities.lazyLoad(exports, ["Flow"], () => require("./flow"));
exports.FlowStageBinding = null;
utilities.lazyLoad(exports, ["FlowStageBinding"], () => require("./flowStageBinding"));
exports.getBrand = null;
exports.getBrandOutput = null;
utilities.lazyLoad(exports, ["getBrand", "getBrandOutput"], () => require("./getBrand"));
exports.getCertificateKeyPair = null;
exports.getCertificateKeyPairOutput = null;
utilities.lazyLoad(exports, ["getCertificateKeyPair", "getCertificateKeyPairOutput"], () => require("./getCertificateKeyPair"));
exports.getFlow = null;
exports.getFlowOutput = null;
utilities.lazyLoad(exports, ["getFlow", "getFlowOutput"], () => require("./getFlow"));
exports.getGroup = null;
exports.getGroupOutput = null;
utilities.lazyLoad(exports, ["getGroup", "getGroupOutput"], () => require("./getGroup"));
exports.getGroups = null;
exports.getGroupsOutput = null;
utilities.lazyLoad(exports, ["getGroups", "getGroupsOutput"], () => require("./getGroups"));
exports.getPropertyMappingProviderRac = null;
exports.getPropertyMappingProviderRacOutput = null;
utilities.lazyLoad(exports, ["getPropertyMappingProviderRac", "getPropertyMappingProviderRacOutput"], () => require("./getPropertyMappingProviderRac"));
exports.getPropertyMappingProviderRadius = null;
exports.getPropertyMappingProviderRadiusOutput = null;
utilities.lazyLoad(exports, ["getPropertyMappingProviderRadius", "getPropertyMappingProviderRadiusOutput"], () => require("./getPropertyMappingProviderRadius"));
exports.getPropertyMappingProviderSaml = null;
exports.getPropertyMappingProviderSamlOutput = null;
utilities.lazyLoad(exports, ["getPropertyMappingProviderSaml", "getPropertyMappingProviderSamlOutput"], () => require("./getPropertyMappingProviderSaml"));
exports.getPropertyMappingProviderScim = null;
exports.getPropertyMappingProviderScimOutput = null;
utilities.lazyLoad(exports, ["getPropertyMappingProviderScim", "getPropertyMappingProviderScimOutput"], () => require("./getPropertyMappingProviderScim"));
exports.getPropertyMappingProviderScope = null;
exports.getPropertyMappingProviderScopeOutput = null;
utilities.lazyLoad(exports, ["getPropertyMappingProviderScope", "getPropertyMappingProviderScopeOutput"], () => require("./getPropertyMappingProviderScope"));
exports.getPropertyMappingSourceLdap = null;
exports.getPropertyMappingSourceLdapOutput = null;
utilities.lazyLoad(exports, ["getPropertyMappingSourceLdap", "getPropertyMappingSourceLdapOutput"], () => require("./getPropertyMappingSourceLdap"));
exports.getProviderOauth2Config = null;
exports.getProviderOauth2ConfigOutput = null;
utilities.lazyLoad(exports, ["getProviderOauth2Config", "getProviderOauth2ConfigOutput"], () => require("./getProviderOauth2Config"));
exports.getProviderSamlMetadata = null;
exports.getProviderSamlMetadataOutput = null;
utilities.lazyLoad(exports, ["getProviderSamlMetadata", "getProviderSamlMetadataOutput"], () => require("./getProviderSamlMetadata"));
exports.getRbacPermission = null;
exports.getRbacPermissionOutput = null;
utilities.lazyLoad(exports, ["getRbacPermission", "getRbacPermissionOutput"], () => require("./getRbacPermission"));
exports.getServiceConnectionKubernetes = null;
exports.getServiceConnectionKubernetesOutput = null;
utilities.lazyLoad(exports, ["getServiceConnectionKubernetes", "getServiceConnectionKubernetesOutput"], () => require("./getServiceConnectionKubernetes"));
exports.getSource = null;
exports.getSourceOutput = null;
utilities.lazyLoad(exports, ["getSource", "getSourceOutput"], () => require("./getSource"));
exports.getStage = null;
exports.getStageOutput = null;
utilities.lazyLoad(exports, ["getStage", "getStageOutput"], () => require("./getStage"));
exports.getUser = null;
exports.getUserOutput = null;
utilities.lazyLoad(exports, ["getUser", "getUserOutput"], () => require("./getUser"));
exports.getUsers = null;
exports.getUsersOutput = null;
utilities.lazyLoad(exports, ["getUsers", "getUsersOutput"], () => require("./getUsers"));
exports.getWebauthnDeviceType = null;
exports.getWebauthnDeviceTypeOutput = null;
utilities.lazyLoad(exports, ["getWebauthnDeviceType", "getWebauthnDeviceTypeOutput"], () => require("./getWebauthnDeviceType"));
exports.Group = null;
utilities.lazyLoad(exports, ["Group"], () => require("./group"));
exports.Outpost = null;
utilities.lazyLoad(exports, ["Outpost"], () => require("./outpost"));
exports.PolicyBinding = null;
utilities.lazyLoad(exports, ["PolicyBinding"], () => require("./policyBinding"));
exports.PolicyDummy = null;
utilities.lazyLoad(exports, ["PolicyDummy"], () => require("./policyDummy"));
exports.PolicyEventMatcher = null;
utilities.lazyLoad(exports, ["PolicyEventMatcher"], () => require("./policyEventMatcher"));
exports.PolicyExpiry = null;
utilities.lazyLoad(exports, ["PolicyExpiry"], () => require("./policyExpiry"));
exports.PolicyExpression = null;
utilities.lazyLoad(exports, ["PolicyExpression"], () => require("./policyExpression"));
exports.PolicyGeoip = null;
utilities.lazyLoad(exports, ["PolicyGeoip"], () => require("./policyGeoip"));
exports.PolicyPassword = null;
utilities.lazyLoad(exports, ["PolicyPassword"], () => require("./policyPassword"));
exports.PolicyReputation = null;
utilities.lazyLoad(exports, ["PolicyReputation"], () => require("./policyReputation"));
exports.PolicyUniquePassword = null;
utilities.lazyLoad(exports, ["PolicyUniquePassword"], () => require("./policyUniquePassword"));
exports.PropertyMappingGoogleWorkspace = null;
utilities.lazyLoad(exports, ["PropertyMappingGoogleWorkspace"], () => require("./propertyMappingGoogleWorkspace"));
exports.PropertyMappingLdap = null;
utilities.lazyLoad(exports, ["PropertyMappingLdap"], () => require("./propertyMappingLdap"));
exports.PropertyMappingMicrosoftEntra = null;
utilities.lazyLoad(exports, ["PropertyMappingMicrosoftEntra"], () => require("./propertyMappingMicrosoftEntra"));
exports.PropertyMappingNotification = null;
utilities.lazyLoad(exports, ["PropertyMappingNotification"], () => require("./propertyMappingNotification"));
exports.PropertyMappingProviderGoogleWorkspace = null;
utilities.lazyLoad(exports, ["PropertyMappingProviderGoogleWorkspace"], () => require("./propertyMappingProviderGoogleWorkspace"));
exports.PropertyMappingProviderMicrosoftEntra = null;
utilities.lazyLoad(exports, ["PropertyMappingProviderMicrosoftEntra"], () => require("./propertyMappingProviderMicrosoftEntra"));
exports.PropertyMappingProviderRac = null;
utilities.lazyLoad(exports, ["PropertyMappingProviderRac"], () => require("./propertyMappingProviderRac"));
exports.PropertyMappingProviderRadius = null;
utilities.lazyLoad(exports, ["PropertyMappingProviderRadius"], () => require("./propertyMappingProviderRadius"));
exports.PropertyMappingProviderSaml = null;
utilities.lazyLoad(exports, ["PropertyMappingProviderSaml"], () => require("./propertyMappingProviderSaml"));
exports.PropertyMappingProviderScim = null;
utilities.lazyLoad(exports, ["PropertyMappingProviderScim"], () => require("./propertyMappingProviderScim"));
exports.PropertyMappingProviderScope = null;
utilities.lazyLoad(exports, ["PropertyMappingProviderScope"], () => require("./propertyMappingProviderScope"));
exports.PropertyMappingRac = null;
utilities.lazyLoad(exports, ["PropertyMappingRac"], () => require("./propertyMappingRac"));
exports.PropertyMappingRadius = null;
utilities.lazyLoad(exports, ["PropertyMappingRadius"], () => require("./propertyMappingRadius"));
exports.PropertyMappingSaml = null;
utilities.lazyLoad(exports, ["PropertyMappingSaml"], () => require("./propertyMappingSaml"));
exports.PropertyMappingScim = null;
utilities.lazyLoad(exports, ["PropertyMappingScim"], () => require("./propertyMappingScim"));
exports.PropertyMappingSourceKerberos = null;
utilities.lazyLoad(exports, ["PropertyMappingSourceKerberos"], () => require("./propertyMappingSourceKerberos"));
exports.PropertyMappingSourceLdap = null;
utilities.lazyLoad(exports, ["PropertyMappingSourceLdap"], () => require("./propertyMappingSourceLdap"));
exports.PropertyMappingSourceOauth = null;
utilities.lazyLoad(exports, ["PropertyMappingSourceOauth"], () => require("./propertyMappingSourceOauth"));
exports.PropertyMappingSourcePlex = null;
utilities.lazyLoad(exports, ["PropertyMappingSourcePlex"], () => require("./propertyMappingSourcePlex"));
exports.PropertyMappingSourceSaml = null;
utilities.lazyLoad(exports, ["PropertyMappingSourceSaml"], () => require("./propertyMappingSourceSaml"));
exports.PropertyMappingSourceScim = null;
utilities.lazyLoad(exports, ["PropertyMappingSourceScim"], () => require("./propertyMappingSourceScim"));
__exportStar(require("./provider"), exports);
const provider_1 = require("./provider");
exports.ProviderGoogleWorkspace = null;
utilities.lazyLoad(exports, ["ProviderGoogleWorkspace"], () => require("./providerGoogleWorkspace"));
exports.ProviderLdap = null;
utilities.lazyLoad(exports, ["ProviderLdap"], () => require("./providerLdap"));
exports.ProviderMicrosoftEntra = null;
utilities.lazyLoad(exports, ["ProviderMicrosoftEntra"], () => require("./providerMicrosoftEntra"));
exports.ProviderOauth2 = null;
utilities.lazyLoad(exports, ["ProviderOauth2"], () => require("./providerOauth2"));
exports.ProviderProxy = null;
utilities.lazyLoad(exports, ["ProviderProxy"], () => require("./providerProxy"));
exports.ProviderRac = null;
utilities.lazyLoad(exports, ["ProviderRac"], () => require("./providerRac"));
exports.ProviderRadius = null;
utilities.lazyLoad(exports, ["ProviderRadius"], () => require("./providerRadius"));
exports.ProviderSaml = null;
utilities.lazyLoad(exports, ["ProviderSaml"], () => require("./providerSaml"));
exports.ProviderScim = null;
utilities.lazyLoad(exports, ["ProviderScim"], () => require("./providerScim"));
exports.ProviderSsf = null;
utilities.lazyLoad(exports, ["ProviderSsf"], () => require("./providerSsf"));
exports.RacEndpoint = null;
utilities.lazyLoad(exports, ["RacEndpoint"], () => require("./racEndpoint"));
exports.RbacInitialPermissions = null;
utilities.lazyLoad(exports, ["RbacInitialPermissions"], () => require("./rbacInitialPermissions"));
exports.RbacPermissionRole = null;
utilities.lazyLoad(exports, ["RbacPermissionRole"], () => require("./rbacPermissionRole"));
exports.RbacPermissionUser = null;
utilities.lazyLoad(exports, ["RbacPermissionUser"], () => require("./rbacPermissionUser"));
exports.RbacRole = null;
utilities.lazyLoad(exports, ["RbacRole"], () => require("./rbacRole"));
exports.ScopeMapping = null;
utilities.lazyLoad(exports, ["ScopeMapping"], () => require("./scopeMapping"));
exports.ServiceConnectionDocker = null;
utilities.lazyLoad(exports, ["ServiceConnectionDocker"], () => require("./serviceConnectionDocker"));
exports.ServiceConnectionKubernetes = null;
utilities.lazyLoad(exports, ["ServiceConnectionKubernetes"], () => require("./serviceConnectionKubernetes"));
exports.SourceKerberos = null;
utilities.lazyLoad(exports, ["SourceKerberos"], () => require("./sourceKerberos"));
exports.SourceLdap = null;
utilities.lazyLoad(exports, ["SourceLdap"], () => require("./sourceLdap"));
exports.SourceOauth = null;
utilities.lazyLoad(exports, ["SourceOauth"], () => require("./sourceOauth"));
exports.SourcePlex = null;
utilities.lazyLoad(exports, ["SourcePlex"], () => require("./sourcePlex"));
exports.SourceSaml = null;
utilities.lazyLoad(exports, ["SourceSaml"], () => require("./sourceSaml"));
exports.StageAuthenticatorDuo = null;
utilities.lazyLoad(exports, ["StageAuthenticatorDuo"], () => require("./stageAuthenticatorDuo"));
exports.StageAuthenticatorEmail = null;
utilities.lazyLoad(exports, ["StageAuthenticatorEmail"], () => require("./stageAuthenticatorEmail"));
exports.StageAuthenticatorEndpointGdtc = null;
utilities.lazyLoad(exports, ["StageAuthenticatorEndpointGdtc"], () => require("./stageAuthenticatorEndpointGdtc"));
exports.StageAuthenticatorSms = null;
utilities.lazyLoad(exports, ["StageAuthenticatorSms"], () => require("./stageAuthenticatorSms"));
exports.StageAuthenticatorStatic = null;
utilities.lazyLoad(exports, ["StageAuthenticatorStatic"], () => require("./stageAuthenticatorStatic"));
exports.StageAuthenticatorTotp = null;
utilities.lazyLoad(exports, ["StageAuthenticatorTotp"], () => require("./stageAuthenticatorTotp"));
exports.StageAuthenticatorValidate = null;
utilities.lazyLoad(exports, ["StageAuthenticatorValidate"], () => require("./stageAuthenticatorValidate"));
exports.StageAuthenticatorWebauthn = null;
utilities.lazyLoad(exports, ["StageAuthenticatorWebauthn"], () => require("./stageAuthenticatorWebauthn"));
exports.StageCaptcha = null;
utilities.lazyLoad(exports, ["StageCaptcha"], () => require("./stageCaptcha"));
exports.StageConsent = null;
utilities.lazyLoad(exports, ["StageConsent"], () => require("./stageConsent"));
exports.StageDeny = null;
utilities.lazyLoad(exports, ["StageDeny"], () => require("./stageDeny"));
exports.StageDummy = null;
utilities.lazyLoad(exports, ["StageDummy"], () => require("./stageDummy"));
exports.StageEmail = null;
utilities.lazyLoad(exports, ["StageEmail"], () => require("./stageEmail"));
exports.StageIdentification = null;
utilities.lazyLoad(exports, ["StageIdentification"], () => require("./stageIdentification"));
exports.StageInvitation = null;
utilities.lazyLoad(exports, ["StageInvitation"], () => require("./stageInvitation"));
exports.StageMutualTls = null;
utilities.lazyLoad(exports, ["StageMutualTls"], () => require("./stageMutualTls"));
exports.StagePassword = null;
utilities.lazyLoad(exports, ["StagePassword"], () => require("./stagePassword"));
exports.StagePrompt = null;
utilities.lazyLoad(exports, ["StagePrompt"], () => require("./stagePrompt"));
exports.StagePromptField = null;
utilities.lazyLoad(exports, ["StagePromptField"], () => require("./stagePromptField"));
exports.StageRedirect = null;
utilities.lazyLoad(exports, ["StageRedirect"], () => require("./stageRedirect"));
exports.StageSource = null;
utilities.lazyLoad(exports, ["StageSource"], () => require("./stageSource"));
exports.StageUserDelete = null;
utilities.lazyLoad(exports, ["StageUserDelete"], () => require("./stageUserDelete"));
exports.StageUserLogin = null;
utilities.lazyLoad(exports, ["StageUserLogin"], () => require("./stageUserLogin"));
exports.StageUserLogout = null;
utilities.lazyLoad(exports, ["StageUserLogout"], () => require("./stageUserLogout"));
exports.StageUserWrite = null;
utilities.lazyLoad(exports, ["StageUserWrite"], () => require("./stageUserWrite"));
exports.SystemSettings = null;
utilities.lazyLoad(exports, ["SystemSettings"], () => require("./systemSettings"));
exports.Token = null;
utilities.lazyLoad(exports, ["Token"], () => require("./token"));
exports.User = null;
utilities.lazyLoad(exports, ["User"], () => require("./user"));
// Export sub-modules:
const config = require("./config");
exports.config = config;
const types = require("./types");
exports.types = types;
const _module = {
    version: utilities.getVersion(),
    construct: (name, type, urn) => {
        switch (type) {
            case "authentik:index/application:Application":
                return new exports.Application(name, undefined, { urn });
            case "authentik:index/applicationEntitlement:ApplicationEntitlement":
                return new exports.ApplicationEntitlement(name, undefined, { urn });
            case "authentik:index/blueprint:Blueprint":
                return new exports.Blueprint(name, undefined, { urn });
            case "authentik:index/brand:Brand":
                return new exports.Brand(name, undefined, { urn });
            case "authentik:index/certificateKeyPair:CertificateKeyPair":
                return new exports.CertificateKeyPair(name, undefined, { urn });
            case "authentik:index/enterpriseLicense:EnterpriseLicense":
                return new exports.EnterpriseLicense(name, undefined, { urn });
            case "authentik:index/eventRule:EventRule":
                return new exports.EventRule(name, undefined, { urn });
            case "authentik:index/eventTransport:EventTransport":
                return new exports.EventTransport(name, undefined, { urn });
            case "authentik:index/flow:Flow":
                return new exports.Flow(name, undefined, { urn });
            case "authentik:index/flowStageBinding:FlowStageBinding":
                return new exports.FlowStageBinding(name, undefined, { urn });
            case "authentik:index/group:Group":
                return new exports.Group(name, undefined, { urn });
            case "authentik:index/outpost:Outpost":
                return new exports.Outpost(name, undefined, { urn });
            case "authentik:index/policyBinding:PolicyBinding":
                return new exports.PolicyBinding(name, undefined, { urn });
            case "authentik:index/policyDummy:PolicyDummy":
                return new exports.PolicyDummy(name, undefined, { urn });
            case "authentik:index/policyEventMatcher:PolicyEventMatcher":
                return new exports.PolicyEventMatcher(name, undefined, { urn });
            case "authentik:index/policyExpiry:PolicyExpiry":
                return new exports.PolicyExpiry(name, undefined, { urn });
            case "authentik:index/policyExpression:PolicyExpression":
                return new exports.PolicyExpression(name, undefined, { urn });
            case "authentik:index/policyGeoip:PolicyGeoip":
                return new exports.PolicyGeoip(name, undefined, { urn });
            case "authentik:index/policyPassword:PolicyPassword":
                return new exports.PolicyPassword(name, undefined, { urn });
            case "authentik:index/policyReputation:PolicyReputation":
                return new exports.PolicyReputation(name, undefined, { urn });
            case "authentik:index/policyUniquePassword:PolicyUniquePassword":
                return new exports.PolicyUniquePassword(name, undefined, { urn });
            case "authentik:index/propertyMappingGoogleWorkspace:PropertyMappingGoogleWorkspace":
                return new exports.PropertyMappingGoogleWorkspace(name, undefined, { urn });
            case "authentik:index/propertyMappingLdap:PropertyMappingLdap":
                return new exports.PropertyMappingLdap(name, undefined, { urn });
            case "authentik:index/propertyMappingMicrosoftEntra:PropertyMappingMicrosoftEntra":
                return new exports.PropertyMappingMicrosoftEntra(name, undefined, { urn });
            case "authentik:index/propertyMappingNotification:PropertyMappingNotification":
                return new exports.PropertyMappingNotification(name, undefined, { urn });
            case "authentik:index/propertyMappingProviderGoogleWorkspace:PropertyMappingProviderGoogleWorkspace":
                return new exports.PropertyMappingProviderGoogleWorkspace(name, undefined, { urn });
            case "authentik:index/propertyMappingProviderMicrosoftEntra:PropertyMappingProviderMicrosoftEntra":
                return new exports.PropertyMappingProviderMicrosoftEntra(name, undefined, { urn });
            case "authentik:index/propertyMappingProviderRac:PropertyMappingProviderRac":
                return new exports.PropertyMappingProviderRac(name, undefined, { urn });
            case "authentik:index/propertyMappingProviderRadius:PropertyMappingProviderRadius":
                return new exports.PropertyMappingProviderRadius(name, undefined, { urn });
            case "authentik:index/propertyMappingProviderSaml:PropertyMappingProviderSaml":
                return new exports.PropertyMappingProviderSaml(name, undefined, { urn });
            case "authentik:index/propertyMappingProviderScim:PropertyMappingProviderScim":
                return new exports.PropertyMappingProviderScim(name, undefined, { urn });
            case "authentik:index/propertyMappingProviderScope:PropertyMappingProviderScope":
                return new exports.PropertyMappingProviderScope(name, undefined, { urn });
            case "authentik:index/propertyMappingRac:PropertyMappingRac":
                return new exports.PropertyMappingRac(name, undefined, { urn });
            case "authentik:index/propertyMappingRadius:PropertyMappingRadius":
                return new exports.PropertyMappingRadius(name, undefined, { urn });
            case "authentik:index/propertyMappingSaml:PropertyMappingSaml":
                return new exports.PropertyMappingSaml(name, undefined, { urn });
            case "authentik:index/propertyMappingScim:PropertyMappingScim":
                return new exports.PropertyMappingScim(name, undefined, { urn });
            case "authentik:index/propertyMappingSourceKerberos:PropertyMappingSourceKerberos":
                return new exports.PropertyMappingSourceKerberos(name, undefined, { urn });
            case "authentik:index/propertyMappingSourceLdap:PropertyMappingSourceLdap":
                return new exports.PropertyMappingSourceLdap(name, undefined, { urn });
            case "authentik:index/propertyMappingSourceOauth:PropertyMappingSourceOauth":
                return new exports.PropertyMappingSourceOauth(name, undefined, { urn });
            case "authentik:index/propertyMappingSourcePlex:PropertyMappingSourcePlex":
                return new exports.PropertyMappingSourcePlex(name, undefined, { urn });
            case "authentik:index/propertyMappingSourceSaml:PropertyMappingSourceSaml":
                return new exports.PropertyMappingSourceSaml(name, undefined, { urn });
            case "authentik:index/propertyMappingSourceScim:PropertyMappingSourceScim":
                return new exports.PropertyMappingSourceScim(name, undefined, { urn });
            case "authentik:index/providerGoogleWorkspace:ProviderGoogleWorkspace":
                return new exports.ProviderGoogleWorkspace(name, undefined, { urn });
            case "authentik:index/providerLdap:ProviderLdap":
                return new exports.ProviderLdap(name, undefined, { urn });
            case "authentik:index/providerMicrosoftEntra:ProviderMicrosoftEntra":
                return new exports.ProviderMicrosoftEntra(name, undefined, { urn });
            case "authentik:index/providerOauth2:ProviderOauth2":
                return new exports.ProviderOauth2(name, undefined, { urn });
            case "authentik:index/providerProxy:ProviderProxy":
                return new exports.ProviderProxy(name, undefined, { urn });
            case "authentik:index/providerRac:ProviderRac":
                return new exports.ProviderRac(name, undefined, { urn });
            case "authentik:index/providerRadius:ProviderRadius":
                return new exports.ProviderRadius(name, undefined, { urn });
            case "authentik:index/providerSaml:ProviderSaml":
                return new exports.ProviderSaml(name, undefined, { urn });
            case "authentik:index/providerScim:ProviderScim":
                return new exports.ProviderScim(name, undefined, { urn });
            case "authentik:index/providerSsf:ProviderSsf":
                return new exports.ProviderSsf(name, undefined, { urn });
            case "authentik:index/racEndpoint:RacEndpoint":
                return new exports.RacEndpoint(name, undefined, { urn });
            case "authentik:index/rbacInitialPermissions:RbacInitialPermissions":
                return new exports.RbacInitialPermissions(name, undefined, { urn });
            case "authentik:index/rbacPermissionRole:RbacPermissionRole":
                return new exports.RbacPermissionRole(name, undefined, { urn });
            case "authentik:index/rbacPermissionUser:RbacPermissionUser":
                return new exports.RbacPermissionUser(name, undefined, { urn });
            case "authentik:index/rbacRole:RbacRole":
                return new exports.RbacRole(name, undefined, { urn });
            case "authentik:index/scopeMapping:ScopeMapping":
                return new exports.ScopeMapping(name, undefined, { urn });
            case "authentik:index/serviceConnectionDocker:ServiceConnectionDocker":
                return new exports.ServiceConnectionDocker(name, undefined, { urn });
            case "authentik:index/serviceConnectionKubernetes:ServiceConnectionKubernetes":
                return new exports.ServiceConnectionKubernetes(name, undefined, { urn });
            case "authentik:index/sourceKerberos:SourceKerberos":
                return new exports.SourceKerberos(name, undefined, { urn });
            case "authentik:index/sourceLdap:SourceLdap":
                return new exports.SourceLdap(name, undefined, { urn });
            case "authentik:index/sourceOauth:SourceOauth":
                return new exports.SourceOauth(name, undefined, { urn });
            case "authentik:index/sourcePlex:SourcePlex":
                return new exports.SourcePlex(name, undefined, { urn });
            case "authentik:index/sourceSaml:SourceSaml":
                return new exports.SourceSaml(name, undefined, { urn });
            case "authentik:index/stageAuthenticatorDuo:StageAuthenticatorDuo":
                return new exports.StageAuthenticatorDuo(name, undefined, { urn });
            case "authentik:index/stageAuthenticatorEmail:StageAuthenticatorEmail":
                return new exports.StageAuthenticatorEmail(name, undefined, { urn });
            case "authentik:index/stageAuthenticatorEndpointGdtc:StageAuthenticatorEndpointGdtc":
                return new exports.StageAuthenticatorEndpointGdtc(name, undefined, { urn });
            case "authentik:index/stageAuthenticatorSms:StageAuthenticatorSms":
                return new exports.StageAuthenticatorSms(name, undefined, { urn });
            case "authentik:index/stageAuthenticatorStatic:StageAuthenticatorStatic":
                return new exports.StageAuthenticatorStatic(name, undefined, { urn });
            case "authentik:index/stageAuthenticatorTotp:StageAuthenticatorTotp":
                return new exports.StageAuthenticatorTotp(name, undefined, { urn });
            case "authentik:index/stageAuthenticatorValidate:StageAuthenticatorValidate":
                return new exports.StageAuthenticatorValidate(name, undefined, { urn });
            case "authentik:index/stageAuthenticatorWebauthn:StageAuthenticatorWebauthn":
                return new exports.StageAuthenticatorWebauthn(name, undefined, { urn });
            case "authentik:index/stageCaptcha:StageCaptcha":
                return new exports.StageCaptcha(name, undefined, { urn });
            case "authentik:index/stageConsent:StageConsent":
                return new exports.StageConsent(name, undefined, { urn });
            case "authentik:index/stageDeny:StageDeny":
                return new exports.StageDeny(name, undefined, { urn });
            case "authentik:index/stageDummy:StageDummy":
                return new exports.StageDummy(name, undefined, { urn });
            case "authentik:index/stageEmail:StageEmail":
                return new exports.StageEmail(name, undefined, { urn });
            case "authentik:index/stageIdentification:StageIdentification":
                return new exports.StageIdentification(name, undefined, { urn });
            case "authentik:index/stageInvitation:StageInvitation":
                return new exports.StageInvitation(name, undefined, { urn });
            case "authentik:index/stageMutualTls:StageMutualTls":
                return new exports.StageMutualTls(name, undefined, { urn });
            case "authentik:index/stagePassword:StagePassword":
                return new exports.StagePassword(name, undefined, { urn });
            case "authentik:index/stagePrompt:StagePrompt":
                return new exports.StagePrompt(name, undefined, { urn });
            case "authentik:index/stagePromptField:StagePromptField":
                return new exports.StagePromptField(name, undefined, { urn });
            case "authentik:index/stageRedirect:StageRedirect":
                return new exports.StageRedirect(name, undefined, { urn });
            case "authentik:index/stageSource:StageSource":
                return new exports.StageSource(name, undefined, { urn });
            case "authentik:index/stageUserDelete:StageUserDelete":
                return new exports.StageUserDelete(name, undefined, { urn });
            case "authentik:index/stageUserLogin:StageUserLogin":
                return new exports.StageUserLogin(name, undefined, { urn });
            case "authentik:index/stageUserLogout:StageUserLogout":
                return new exports.StageUserLogout(name, undefined, { urn });
            case "authentik:index/stageUserWrite:StageUserWrite":
                return new exports.StageUserWrite(name, undefined, { urn });
            case "authentik:index/systemSettings:SystemSettings":
                return new exports.SystemSettings(name, undefined, { urn });
            case "authentik:index/token:Token":
                return new exports.Token(name, undefined, { urn });
            case "authentik:index/user:User":
                return new exports.User(name, undefined, { urn });
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("authentik", "index/application", _module);
pulumi.runtime.registerResourceModule("authentik", "index/applicationEntitlement", _module);
pulumi.runtime.registerResourceModule("authentik", "index/blueprint", _module);
pulumi.runtime.registerResourceModule("authentik", "index/brand", _module);
pulumi.runtime.registerResourceModule("authentik", "index/certificateKeyPair", _module);
pulumi.runtime.registerResourceModule("authentik", "index/enterpriseLicense", _module);
pulumi.runtime.registerResourceModule("authentik", "index/eventRule", _module);
pulumi.runtime.registerResourceModule("authentik", "index/eventTransport", _module);
pulumi.runtime.registerResourceModule("authentik", "index/flow", _module);
pulumi.runtime.registerResourceModule("authentik", "index/flowStageBinding", _module);
pulumi.runtime.registerResourceModule("authentik", "index/group", _module);
pulumi.runtime.registerResourceModule("authentik", "index/outpost", _module);
pulumi.runtime.registerResourceModule("authentik", "index/policyBinding", _module);
pulumi.runtime.registerResourceModule("authentik", "index/policyDummy", _module);
pulumi.runtime.registerResourceModule("authentik", "index/policyEventMatcher", _module);
pulumi.runtime.registerResourceModule("authentik", "index/policyExpiry", _module);
pulumi.runtime.registerResourceModule("authentik", "index/policyExpression", _module);
pulumi.runtime.registerResourceModule("authentik", "index/policyGeoip", _module);
pulumi.runtime.registerResourceModule("authentik", "index/policyPassword", _module);
pulumi.runtime.registerResourceModule("authentik", "index/policyReputation", _module);
pulumi.runtime.registerResourceModule("authentik", "index/policyUniquePassword", _module);
pulumi.runtime.registerResourceModule("authentik", "index/propertyMappingGoogleWorkspace", _module);
pulumi.runtime.registerResourceModule("authentik", "index/propertyMappingLdap", _module);
pulumi.runtime.registerResourceModule("authentik", "index/propertyMappingMicrosoftEntra", _module);
pulumi.runtime.registerResourceModule("authentik", "index/propertyMappingNotification", _module);
pulumi.runtime.registerResourceModule("authentik", "index/propertyMappingProviderGoogleWorkspace", _module);
pulumi.runtime.registerResourceModule("authentik", "index/propertyMappingProviderMicrosoftEntra", _module);
pulumi.runtime.registerResourceModule("authentik", "index/propertyMappingProviderRac", _module);
pulumi.runtime.registerResourceModule("authentik", "index/propertyMappingProviderRadius", _module);
pulumi.runtime.registerResourceModule("authentik", "index/propertyMappingProviderSaml", _module);
pulumi.runtime.registerResourceModule("authentik", "index/propertyMappingProviderScim", _module);
pulumi.runtime.registerResourceModule("authentik", "index/propertyMappingProviderScope", _module);
pulumi.runtime.registerResourceModule("authentik", "index/propertyMappingRac", _module);
pulumi.runtime.registerResourceModule("authentik", "index/propertyMappingRadius", _module);
pulumi.runtime.registerResourceModule("authentik", "index/propertyMappingSaml", _module);
pulumi.runtime.registerResourceModule("authentik", "index/propertyMappingScim", _module);
pulumi.runtime.registerResourceModule("authentik", "index/propertyMappingSourceKerberos", _module);
pulumi.runtime.registerResourceModule("authentik", "index/propertyMappingSourceLdap", _module);
pulumi.runtime.registerResourceModule("authentik", "index/propertyMappingSourceOauth", _module);
pulumi.runtime.registerResourceModule("authentik", "index/propertyMappingSourcePlex", _module);
pulumi.runtime.registerResourceModule("authentik", "index/propertyMappingSourceSaml", _module);
pulumi.runtime.registerResourceModule("authentik", "index/propertyMappingSourceScim", _module);
pulumi.runtime.registerResourceModule("authentik", "index/providerGoogleWorkspace", _module);
pulumi.runtime.registerResourceModule("authentik", "index/providerLdap", _module);
pulumi.runtime.registerResourceModule("authentik", "index/providerMicrosoftEntra", _module);
pulumi.runtime.registerResourceModule("authentik", "index/providerOauth2", _module);
pulumi.runtime.registerResourceModule("authentik", "index/providerProxy", _module);
pulumi.runtime.registerResourceModule("authentik", "index/providerRac", _module);
pulumi.runtime.registerResourceModule("authentik", "index/providerRadius", _module);
pulumi.runtime.registerResourceModule("authentik", "index/providerSaml", _module);
pulumi.runtime.registerResourceModule("authentik", "index/providerScim", _module);
pulumi.runtime.registerResourceModule("authentik", "index/providerSsf", _module);
pulumi.runtime.registerResourceModule("authentik", "index/racEndpoint", _module);
pulumi.runtime.registerResourceModule("authentik", "index/rbacInitialPermissions", _module);
pulumi.runtime.registerResourceModule("authentik", "index/rbacPermissionRole", _module);
pulumi.runtime.registerResourceModule("authentik", "index/rbacPermissionUser", _module);
pulumi.runtime.registerResourceModule("authentik", "index/rbacRole", _module);
pulumi.runtime.registerResourceModule("authentik", "index/scopeMapping", _module);
pulumi.runtime.registerResourceModule("authentik", "index/serviceConnectionDocker", _module);
pulumi.runtime.registerResourceModule("authentik", "index/serviceConnectionKubernetes", _module);
pulumi.runtime.registerResourceModule("authentik", "index/sourceKerberos", _module);
pulumi.runtime.registerResourceModule("authentik", "index/sourceLdap", _module);
pulumi.runtime.registerResourceModule("authentik", "index/sourceOauth", _module);
pulumi.runtime.registerResourceModule("authentik", "index/sourcePlex", _module);
pulumi.runtime.registerResourceModule("authentik", "index/sourceSaml", _module);
pulumi.runtime.registerResourceModule("authentik", "index/stageAuthenticatorDuo", _module);
pulumi.runtime.registerResourceModule("authentik", "index/stageAuthenticatorEmail", _module);
pulumi.runtime.registerResourceModule("authentik", "index/stageAuthenticatorEndpointGdtc", _module);
pulumi.runtime.registerResourceModule("authentik", "index/stageAuthenticatorSms", _module);
pulumi.runtime.registerResourceModule("authentik", "index/stageAuthenticatorStatic", _module);
pulumi.runtime.registerResourceModule("authentik", "index/stageAuthenticatorTotp", _module);
pulumi.runtime.registerResourceModule("authentik", "index/stageAuthenticatorValidate", _module);
pulumi.runtime.registerResourceModule("authentik", "index/stageAuthenticatorWebauthn", _module);
pulumi.runtime.registerResourceModule("authentik", "index/stageCaptcha", _module);
pulumi.runtime.registerResourceModule("authentik", "index/stageConsent", _module);
pulumi.runtime.registerResourceModule("authentik", "index/stageDeny", _module);
pulumi.runtime.registerResourceModule("authentik", "index/stageDummy", _module);
pulumi.runtime.registerResourceModule("authentik", "index/stageEmail", _module);
pulumi.runtime.registerResourceModule("authentik", "index/stageIdentification", _module);
pulumi.runtime.registerResourceModule("authentik", "index/stageInvitation", _module);
pulumi.runtime.registerResourceModule("authentik", "index/stageMutualTls", _module);
pulumi.runtime.registerResourceModule("authentik", "index/stagePassword", _module);
pulumi.runtime.registerResourceModule("authentik", "index/stagePrompt", _module);
pulumi.runtime.registerResourceModule("authentik", "index/stagePromptField", _module);
pulumi.runtime.registerResourceModule("authentik", "index/stageRedirect", _module);
pulumi.runtime.registerResourceModule("authentik", "index/stageSource", _module);
pulumi.runtime.registerResourceModule("authentik", "index/stageUserDelete", _module);
pulumi.runtime.registerResourceModule("authentik", "index/stageUserLogin", _module);
pulumi.runtime.registerResourceModule("authentik", "index/stageUserLogout", _module);
pulumi.runtime.registerResourceModule("authentik", "index/stageUserWrite", _module);
pulumi.runtime.registerResourceModule("authentik", "index/systemSettings", _module);
pulumi.runtime.registerResourceModule("authentik", "index/token", _module);
pulumi.runtime.registerResourceModule("authentik", "index/user", _module);
pulumi.runtime.registerResourcePackage("authentik", {
    version: utilities.getVersion(),
    constructProvider: (name, type, urn) => {
        if (type !== "pulumi:providers:authentik") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new provider_1.Provider(name, undefined, { urn });
    },
});
//# sourceMappingURL=index.js.map