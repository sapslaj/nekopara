"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.Outpost = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
class Outpost extends pulumi.CustomResource {
  /**
   * Get an existing Outpost resource's state with the given name, ID, and optional extra
   * properties used to qualify the lookup.
   *
   * @param name The _unique_ name of the resulting resource.
   * @param id The _unique_ provider ID of the resource to lookup.
   * @param state Any extra arguments used during the lookup.
   * @param opts Optional settings to control the behavior of the CustomResource.
   */
  static get(name, id, state, opts) {
    return new Outpost(name, state, Object.assign(Object.assign({}, opts), { id: id }));
  }
  /**
   * Returns true if the given object is an instance of Outpost.  This is designed to work even
   * when multiple copies of the Pulumi SDK have been loaded into the same process.
   */
  static isInstance(obj) {
    if (obj === undefined || obj === null) {
      return false;
    }
    return obj["__pulumiType"] === Outpost.__pulumiType;
  }
  constructor(name, argsOrState, opts) {
    let resourceInputs = {};
    opts = opts || {};
    if (opts.id) {
      const state = argsOrState;
      resourceInputs["config"] = state ? state.config : undefined;
      resourceInputs["name"] = state ? state.name : undefined;
      resourceInputs["outpostId"] = state ? state.outpostId : undefined;
      resourceInputs["protocolProviders"] = state ? state.protocolProviders : undefined;
      resourceInputs["serviceConnection"] = state ? state.serviceConnection : undefined;
      resourceInputs["type"] = state ? state.type : undefined;
    } else {
      const args = argsOrState;
      if ((!args || args.protocolProviders === undefined) && !opts.urn) {
        throw new Error("Missing required property 'protocolProviders'");
      }
      resourceInputs["config"] = args ? args.config : undefined;
      resourceInputs["name"] = args ? args.name : undefined;
      resourceInputs["outpostId"] = args ? args.outpostId : undefined;
      resourceInputs["protocolProviders"] = args ? args.protocolProviders : undefined;
      resourceInputs["serviceConnection"] = args ? args.serviceConnection : undefined;
      resourceInputs["type"] = args ? args.type : undefined;
    }
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
    super(Outpost.__pulumiType, name, resourceInputs, opts, false, /*dependency*/ utilities.getPackage());
  }
}
exports.Outpost = Outpost;
/** @internal */
Outpost.__pulumiType = "authentik:index/outpost:Outpost";
// # sourceMappingURL=outpost.js.map
