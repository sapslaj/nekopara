"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.PropertyMappingSaml = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
class PropertyMappingSaml extends pulumi.CustomResource {
  /**
   * Get an existing PropertyMappingSaml resource's state with the given name, ID, and optional extra
   * properties used to qualify the lookup.
   *
   * @param name The _unique_ name of the resulting resource.
   * @param id The _unique_ provider ID of the resource to lookup.
   * @param state Any extra arguments used during the lookup.
   * @param opts Optional settings to control the behavior of the CustomResource.
   */
  static get(name, id, state, opts) {
    return new PropertyMappingSaml(name, state, Object.assign(Object.assign({}, opts), { id: id }));
  }
  /**
   * Returns true if the given object is an instance of PropertyMappingSaml.  This is designed to work even
   * when multiple copies of the Pulumi SDK have been loaded into the same process.
   */
  static isInstance(obj) {
    if (obj === undefined || obj === null) {
      return false;
    }
    return obj["__pulumiType"] === PropertyMappingSaml.__pulumiType;
  }
  constructor(name, argsOrState, opts) {
    let resourceInputs = {};
    opts = opts || {};
    if (opts.id) {
      const state = argsOrState;
      resourceInputs["expression"] = state ? state.expression : undefined;
      resourceInputs["friendlyName"] = state ? state.friendlyName : undefined;
      resourceInputs["name"] = state ? state.name : undefined;
      resourceInputs["propertyMappingSamlId"] = state ? state.propertyMappingSamlId : undefined;
      resourceInputs["samlName"] = state ? state.samlName : undefined;
    } else {
      const args = argsOrState;
      if ((!args || args.expression === undefined) && !opts.urn) {
        throw new Error("Missing required property 'expression'");
      }
      if ((!args || args.samlName === undefined) && !opts.urn) {
        throw new Error("Missing required property 'samlName'");
      }
      resourceInputs["expression"] = args ? args.expression : undefined;
      resourceInputs["friendlyName"] = args ? args.friendlyName : undefined;
      resourceInputs["name"] = args ? args.name : undefined;
      resourceInputs["propertyMappingSamlId"] = args ? args.propertyMappingSamlId : undefined;
      resourceInputs["samlName"] = args ? args.samlName : undefined;
    }
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
    super(PropertyMappingSaml.__pulumiType, name, resourceInputs, opts, false, /*dependency*/ utilities.getPackage());
  }
}
exports.PropertyMappingSaml = PropertyMappingSaml;
/** @internal */
PropertyMappingSaml.__pulumiType = "authentik:index/propertyMappingSaml:PropertyMappingSaml";
// # sourceMappingURL=propertyMappingSaml.js.map
