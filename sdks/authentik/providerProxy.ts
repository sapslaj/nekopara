// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class ProviderProxy extends pulumi.CustomResource {
  /**
   * Get an existing ProviderProxy resource's state with the given name, ID, and optional extra
   * properties used to qualify the lookup.
   *
   * @param name The _unique_ name of the resulting resource.
   * @param id The _unique_ provider ID of the resource to lookup.
   * @param state Any extra arguments used during the lookup.
   * @param opts Optional settings to control the behavior of the CustomResource.
   */
  public static get(
    name: string,
    id: pulumi.Input<pulumi.ID>,
    state?: ProviderProxyState,
    opts?: pulumi.CustomResourceOptions,
  ): ProviderProxy {
    return new ProviderProxy(name, <any> state, { ...opts, id: id });
  }

  /** @internal */
  public static readonly __pulumiType = "authentik:index/providerProxy:ProviderProxy";

  /**
   * Returns true if the given object is an instance of ProviderProxy.  This is designed to work even
   * when multiple copies of the Pulumi SDK have been loaded into the same process.
   */
  public static isInstance(obj: any): obj is ProviderProxy {
    if (obj === undefined || obj === null) {
      return false;
    }
    return obj["__pulumiType"] === ProviderProxy.__pulumiType;
  }

  /**
   * Defaults to `minutes=10`.
   */
  public readonly accessTokenValidity!: pulumi.Output<string | undefined>;
  public readonly authenticationFlow!: pulumi.Output<string | undefined>;
  public readonly authorizationFlow!: pulumi.Output<string>;
  /**
   * Defaults to `false`.
   */
  public readonly basicAuthEnabled!: pulumi.Output<boolean | undefined>;
  public readonly basicAuthPasswordAttribute!: pulumi.Output<string | undefined>;
  public readonly basicAuthUsernameAttribute!: pulumi.Output<string | undefined>;
  /**
   * Generated.
   */
  public readonly /*out*/ clientId!: pulumi.Output<string>;
  public readonly cookieDomain!: pulumi.Output<string | undefined>;
  public readonly externalHost!: pulumi.Output<string>;
  /**
   * Defaults to `true`.
   */
  public readonly interceptHeaderAuth!: pulumi.Output<boolean | undefined>;
  public readonly internalHost!: pulumi.Output<string | undefined>;
  /**
   * Defaults to `true`.
   */
  public readonly internalHostSslValidation!: pulumi.Output<boolean | undefined>;
  public readonly invalidationFlow!: pulumi.Output<string>;
  /**
   * Deprecated. Use `jwt_federation_sources` instead.
   */
  public readonly jwksSources!: pulumi.Output<string[] | undefined>;
  /**
   * JWTs issued by any of the configured providers can be used to authenticate on behalf of this provider.
   */
  public readonly jwtFederationProviders!: pulumi.Output<number[] | undefined>;
  /**
   * JWTs issued by keys configured in any of the selected sources can be used to authenticate on behalf of this provider.
   */
  public readonly jwtFederationSources!: pulumi.Output<string[] | undefined>;
  /**
   * Allowed values: - `proxy` - `forward_single` - `forward_domain` Defaults to `proxy`.
   */
  public readonly mode!: pulumi.Output<string | undefined>;
  public readonly name!: pulumi.Output<string>;
  public readonly propertyMappings!: pulumi.Output<string[] | undefined>;
  public readonly providerProxyId!: pulumi.Output<string>;
  /**
   * Defaults to `days=30`.
   */
  public readonly refreshTokenValidity!: pulumi.Output<string | undefined>;
  public readonly skipPathRegex!: pulumi.Output<string | undefined>;

  /**
   * Create a ProviderProxy resource with the given unique name, arguments, and options.
   *
   * @param name The _unique_ name of the resource.
   * @param args The arguments to use to populate this resource's properties.
   * @param opts A bag of options that control this resource's behavior.
   */
  constructor(name: string, args: ProviderProxyArgs, opts?: pulumi.CustomResourceOptions);
  constructor(name: string, argsOrState?: ProviderProxyArgs | ProviderProxyState, opts?: pulumi.CustomResourceOptions) {
    let resourceInputs: pulumi.Inputs = {};
    opts = opts || {};
    if (opts.id) {
      const state = argsOrState as ProviderProxyState | undefined;
      resourceInputs["accessTokenValidity"] = state ? state.accessTokenValidity : undefined;
      resourceInputs["authenticationFlow"] = state ? state.authenticationFlow : undefined;
      resourceInputs["authorizationFlow"] = state ? state.authorizationFlow : undefined;
      resourceInputs["basicAuthEnabled"] = state ? state.basicAuthEnabled : undefined;
      resourceInputs["basicAuthPasswordAttribute"] = state ? state.basicAuthPasswordAttribute : undefined;
      resourceInputs["basicAuthUsernameAttribute"] = state ? state.basicAuthUsernameAttribute : undefined;
      resourceInputs["clientId"] = state ? state.clientId : undefined;
      resourceInputs["cookieDomain"] = state ? state.cookieDomain : undefined;
      resourceInputs["externalHost"] = state ? state.externalHost : undefined;
      resourceInputs["interceptHeaderAuth"] = state ? state.interceptHeaderAuth : undefined;
      resourceInputs["internalHost"] = state ? state.internalHost : undefined;
      resourceInputs["internalHostSslValidation"] = state ? state.internalHostSslValidation : undefined;
      resourceInputs["invalidationFlow"] = state ? state.invalidationFlow : undefined;
      resourceInputs["jwksSources"] = state ? state.jwksSources : undefined;
      resourceInputs["jwtFederationProviders"] = state ? state.jwtFederationProviders : undefined;
      resourceInputs["jwtFederationSources"] = state ? state.jwtFederationSources : undefined;
      resourceInputs["mode"] = state ? state.mode : undefined;
      resourceInputs["name"] = state ? state.name : undefined;
      resourceInputs["propertyMappings"] = state ? state.propertyMappings : undefined;
      resourceInputs["providerProxyId"] = state ? state.providerProxyId : undefined;
      resourceInputs["refreshTokenValidity"] = state ? state.refreshTokenValidity : undefined;
      resourceInputs["skipPathRegex"] = state ? state.skipPathRegex : undefined;
    } else {
      const args = argsOrState as ProviderProxyArgs | undefined;
      if ((!args || args.authorizationFlow === undefined) && !opts.urn) {
        throw new Error("Missing required property 'authorizationFlow'");
      }
      if ((!args || args.externalHost === undefined) && !opts.urn) {
        throw new Error("Missing required property 'externalHost'");
      }
      if ((!args || args.invalidationFlow === undefined) && !opts.urn) {
        throw new Error("Missing required property 'invalidationFlow'");
      }
      resourceInputs["accessTokenValidity"] = args ? args.accessTokenValidity : undefined;
      resourceInputs["authenticationFlow"] = args ? args.authenticationFlow : undefined;
      resourceInputs["authorizationFlow"] = args ? args.authorizationFlow : undefined;
      resourceInputs["basicAuthEnabled"] = args ? args.basicAuthEnabled : undefined;
      resourceInputs["basicAuthPasswordAttribute"] = args ? args.basicAuthPasswordAttribute : undefined;
      resourceInputs["basicAuthUsernameAttribute"] = args ? args.basicAuthUsernameAttribute : undefined;
      resourceInputs["cookieDomain"] = args ? args.cookieDomain : undefined;
      resourceInputs["externalHost"] = args ? args.externalHost : undefined;
      resourceInputs["interceptHeaderAuth"] = args ? args.interceptHeaderAuth : undefined;
      resourceInputs["internalHost"] = args ? args.internalHost : undefined;
      resourceInputs["internalHostSslValidation"] = args ? args.internalHostSslValidation : undefined;
      resourceInputs["invalidationFlow"] = args ? args.invalidationFlow : undefined;
      resourceInputs["jwksSources"] = args ? args.jwksSources : undefined;
      resourceInputs["jwtFederationProviders"] = args ? args.jwtFederationProviders : undefined;
      resourceInputs["jwtFederationSources"] = args ? args.jwtFederationSources : undefined;
      resourceInputs["mode"] = args ? args.mode : undefined;
      resourceInputs["name"] = args ? args.name : undefined;
      resourceInputs["propertyMappings"] = args ? args.propertyMappings : undefined;
      resourceInputs["providerProxyId"] = args ? args.providerProxyId : undefined;
      resourceInputs["refreshTokenValidity"] = args ? args.refreshTokenValidity : undefined;
      resourceInputs["skipPathRegex"] = args ? args.skipPathRegex : undefined;
      resourceInputs["clientId"] = undefined /*out*/;
    }
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
    super(ProviderProxy.__pulumiType, name, resourceInputs, opts, false, /*dependency*/ utilities.getPackage());
  }
}

/**
 * Input properties used for looking up and filtering ProviderProxy resources.
 */
export interface ProviderProxyState {
  /**
   * Defaults to `minutes=10`.
   */
  accessTokenValidity?: pulumi.Input<string>;
  authenticationFlow?: pulumi.Input<string>;
  authorizationFlow?: pulumi.Input<string>;
  /**
   * Defaults to `false`.
   */
  basicAuthEnabled?: pulumi.Input<boolean>;
  basicAuthPasswordAttribute?: pulumi.Input<string>;
  basicAuthUsernameAttribute?: pulumi.Input<string>;
  /**
   * Generated.
   */
  clientId?: pulumi.Input<string>;
  cookieDomain?: pulumi.Input<string>;
  externalHost?: pulumi.Input<string>;
  /**
   * Defaults to `true`.
   */
  interceptHeaderAuth?: pulumi.Input<boolean>;
  internalHost?: pulumi.Input<string>;
  /**
   * Defaults to `true`.
   */
  internalHostSslValidation?: pulumi.Input<boolean>;
  invalidationFlow?: pulumi.Input<string>;
  /**
   * Deprecated. Use `jwt_federation_sources` instead.
   */
  jwksSources?: pulumi.Input<pulumi.Input<string>[]>;
  /**
   * JWTs issued by any of the configured providers can be used to authenticate on behalf of this provider.
   */
  jwtFederationProviders?: pulumi.Input<pulumi.Input<number>[]>;
  /**
   * JWTs issued by keys configured in any of the selected sources can be used to authenticate on behalf of this provider.
   */
  jwtFederationSources?: pulumi.Input<pulumi.Input<string>[]>;
  /**
   * Allowed values: - `proxy` - `forward_single` - `forward_domain` Defaults to `proxy`.
   */
  mode?: pulumi.Input<string>;
  name?: pulumi.Input<string>;
  propertyMappings?: pulumi.Input<pulumi.Input<string>[]>;
  providerProxyId?: pulumi.Input<string>;
  /**
   * Defaults to `days=30`.
   */
  refreshTokenValidity?: pulumi.Input<string>;
  skipPathRegex?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ProviderProxy resource.
 */
export interface ProviderProxyArgs {
  /**
   * Defaults to `minutes=10`.
   */
  accessTokenValidity?: pulumi.Input<string>;
  authenticationFlow?: pulumi.Input<string>;
  authorizationFlow: pulumi.Input<string>;
  /**
   * Defaults to `false`.
   */
  basicAuthEnabled?: pulumi.Input<boolean>;
  basicAuthPasswordAttribute?: pulumi.Input<string>;
  basicAuthUsernameAttribute?: pulumi.Input<string>;
  cookieDomain?: pulumi.Input<string>;
  externalHost: pulumi.Input<string>;
  /**
   * Defaults to `true`.
   */
  interceptHeaderAuth?: pulumi.Input<boolean>;
  internalHost?: pulumi.Input<string>;
  /**
   * Defaults to `true`.
   */
  internalHostSslValidation?: pulumi.Input<boolean>;
  invalidationFlow: pulumi.Input<string>;
  /**
   * Deprecated. Use `jwt_federation_sources` instead.
   */
  jwksSources?: pulumi.Input<pulumi.Input<string>[]>;
  /**
   * JWTs issued by any of the configured providers can be used to authenticate on behalf of this provider.
   */
  jwtFederationProviders?: pulumi.Input<pulumi.Input<number>[]>;
  /**
   * JWTs issued by keys configured in any of the selected sources can be used to authenticate on behalf of this provider.
   */
  jwtFederationSources?: pulumi.Input<pulumi.Input<string>[]>;
  /**
   * Allowed values: - `proxy` - `forward_single` - `forward_domain` Defaults to `proxy`.
   */
  mode?: pulumi.Input<string>;
  name?: pulumi.Input<string>;
  propertyMappings?: pulumi.Input<pulumi.Input<string>[]>;
  providerProxyId?: pulumi.Input<string>;
  /**
   * Defaults to `days=30`.
   */
  refreshTokenValidity?: pulumi.Input<string>;
  skipPathRegex?: pulumi.Input<string>;
}
