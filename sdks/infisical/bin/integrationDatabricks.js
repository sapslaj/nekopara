"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.IntegrationDatabricks = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
class IntegrationDatabricks extends pulumi.CustomResource {
  /**
   * Get an existing IntegrationDatabricks resource's state with the given name, ID, and optional extra
   * properties used to qualify the lookup.
   *
   * @param name The _unique_ name of the resulting resource.
   * @param id The _unique_ provider ID of the resource to lookup.
   * @param state Any extra arguments used during the lookup.
   * @param opts Optional settings to control the behavior of the CustomResource.
   */
  static get(name, id, state, opts) {
    return new IntegrationDatabricks(name, state, { ...opts, id: id });
  }
  /**
   * Returns true if the given object is an instance of IntegrationDatabricks.  This is designed to work even
   * when multiple copies of the Pulumi SDK have been loaded into the same process.
   */
  static isInstance(obj) {
    if (obj === undefined || obj === null) {
      return false;
    }
    return obj["__pulumiType"] === IntegrationDatabricks.__pulumiType;
  }
  constructor(name, argsOrState, opts) {
    let resourceInputs = {};
    opts = opts || {};
    if (opts.id) {
      const state = argsOrState;
      resourceInputs["databricksHost"] = state?.databricksHost;
      resourceInputs["databricksSecretScope"] = state?.databricksSecretScope;
      resourceInputs["databricksToken"] = state?.databricksToken;
      resourceInputs["environment"] = state?.environment;
      resourceInputs["integrationAuthId"] = state?.integrationAuthId;
      resourceInputs["integrationId"] = state?.integrationId;
      resourceInputs["projectId"] = state?.projectId;
      resourceInputs["secretPath"] = state?.secretPath;
    } else {
      const args = argsOrState;
      if (args?.databricksHost === undefined && !opts.urn) {
        throw new Error("Missing required property 'databricksHost'");
      }
      if (args?.databricksSecretScope === undefined && !opts.urn) {
        throw new Error("Missing required property 'databricksSecretScope'");
      }
      if (args?.databricksToken === undefined && !opts.urn) {
        throw new Error("Missing required property 'databricksToken'");
      }
      if (args?.environment === undefined && !opts.urn) {
        throw new Error("Missing required property 'environment'");
      }
      if (args?.projectId === undefined && !opts.urn) {
        throw new Error("Missing required property 'projectId'");
      }
      if (args?.secretPath === undefined && !opts.urn) {
        throw new Error("Missing required property 'secretPath'");
      }
      resourceInputs["databricksHost"] = args?.databricksHost;
      resourceInputs["databricksSecretScope"] = args?.databricksSecretScope;
      resourceInputs["databricksToken"] = args?.databricksToken ? pulumi.secret(args.databricksToken) : undefined;
      resourceInputs["environment"] = args?.environment;
      resourceInputs["projectId"] = args?.projectId;
      resourceInputs["secretPath"] = args?.secretPath;
      resourceInputs["integrationAuthId"] = undefined /*out*/;
      resourceInputs["integrationId"] = undefined /*out*/;
    }
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
    const secretOpts = { additionalSecretOutputs: ["databricksToken"] };
    opts = pulumi.mergeOptions(opts, secretOpts);
    super(IntegrationDatabricks.__pulumiType, name, resourceInputs, opts, false, /*dependency*/ utilities.getPackage());
  }
}
exports.IntegrationDatabricks = IntegrationDatabricks;
/** @internal */
IntegrationDatabricks.__pulumiType = "infisical:index/integrationDatabricks:IntegrationDatabricks";
// # sourceMappingURL=integrationDatabricks.js.map
