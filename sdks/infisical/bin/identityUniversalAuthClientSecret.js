"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.IdentityUniversalAuthClientSecret = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
class IdentityUniversalAuthClientSecret extends pulumi.CustomResource {
  /**
   * Get an existing IdentityUniversalAuthClientSecret resource's state with the given name, ID, and optional extra
   * properties used to qualify the lookup.
   *
   * @param name The _unique_ name of the resulting resource.
   * @param id The _unique_ provider ID of the resource to lookup.
   * @param state Any extra arguments used during the lookup.
   * @param opts Optional settings to control the behavior of the CustomResource.
   */
  static get(name, id, state, opts) {
    return new IdentityUniversalAuthClientSecret(name, state, { ...opts, id: id });
  }
  /**
   * Returns true if the given object is an instance of IdentityUniversalAuthClientSecret.  This is designed to work even
   * when multiple copies of the Pulumi SDK have been loaded into the same process.
   */
  static isInstance(obj) {
    if (obj === undefined || obj === null) {
      return false;
    }
    return obj["__pulumiType"] === IdentityUniversalAuthClientSecret.__pulumiType;
  }
  constructor(name, argsOrState, opts) {
    let resourceInputs = {};
    opts = opts || {};
    if (opts.id) {
      const state = argsOrState;
      resourceInputs["clientId"] = state?.clientId;
      resourceInputs["clientSecret"] = state?.clientSecret;
      resourceInputs["createdAt"] = state?.createdAt;
      resourceInputs["description"] = state?.description;
      resourceInputs["identityId"] = state?.identityId;
      resourceInputs["isRevoked"] = state?.isRevoked;
      resourceInputs["numberOfUses"] = state?.numberOfUses;
      resourceInputs["numberOfUsesLimit"] = state?.numberOfUsesLimit;
      resourceInputs["ttl"] = state?.ttl;
    } else {
      const args = argsOrState;
      if (args?.identityId === undefined && !opts.urn) {
        throw new Error("Missing required property 'identityId'");
      }
      resourceInputs["description"] = args?.description;
      resourceInputs["identityId"] = args?.identityId;
      resourceInputs["numberOfUsesLimit"] = args?.numberOfUsesLimit;
      resourceInputs["ttl"] = args?.ttl;
      resourceInputs["clientId"] = undefined /*out*/;
      resourceInputs["clientSecret"] = undefined /*out*/;
      resourceInputs["createdAt"] = undefined /*out*/;
      resourceInputs["isRevoked"] = undefined /*out*/;
      resourceInputs["numberOfUses"] = undefined /*out*/;
    }
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
    const secretOpts = { additionalSecretOutputs: ["clientSecret"] };
    opts = pulumi.mergeOptions(opts, secretOpts);
    super(
      IdentityUniversalAuthClientSecret.__pulumiType,
      name,
      resourceInputs,
      opts,
      false, /*dependency*/
      utilities.getPackage(),
    );
  }
}
exports.IdentityUniversalAuthClientSecret = IdentityUniversalAuthClientSecret;
/** @internal */
IdentityUniversalAuthClientSecret.__pulumiType =
  "infisical:index/identityUniversalAuthClientSecret:IdentityUniversalAuthClientSecret";
// # sourceMappingURL=identityUniversalAuthClientSecret.js.map
