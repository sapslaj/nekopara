"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.IdentityAwsAuth = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
class IdentityAwsAuth extends pulumi.CustomResource {
  /**
   * Get an existing IdentityAwsAuth resource's state with the given name, ID, and optional extra
   * properties used to qualify the lookup.
   *
   * @param name The _unique_ name of the resulting resource.
   * @param id The _unique_ provider ID of the resource to lookup.
   * @param state Any extra arguments used during the lookup.
   * @param opts Optional settings to control the behavior of the CustomResource.
   */
  static get(name, id, state, opts) {
    return new IdentityAwsAuth(name, state, { ...opts, id: id });
  }
  /**
   * Returns true if the given object is an instance of IdentityAwsAuth.  This is designed to work even
   * when multiple copies of the Pulumi SDK have been loaded into the same process.
   */
  static isInstance(obj) {
    if (obj === undefined || obj === null) {
      return false;
    }
    return obj["__pulumiType"] === IdentityAwsAuth.__pulumiType;
  }
  constructor(name, argsOrState, opts) {
    let resourceInputs = {};
    opts = opts || {};
    if (opts.id) {
      const state = argsOrState;
      resourceInputs["accessTokenMaxTtl"] = state?.accessTokenMaxTtl;
      resourceInputs["accessTokenNumUsesLimit"] = state?.accessTokenNumUsesLimit;
      resourceInputs["accessTokenTrustedIps"] = state?.accessTokenTrustedIps;
      resourceInputs["accessTokenTtl"] = state?.accessTokenTtl;
      resourceInputs["allowedAccountIds"] = state?.allowedAccountIds;
      resourceInputs["allowedPrincipalArns"] = state?.allowedPrincipalArns;
      resourceInputs["identityId"] = state?.identityId;
      resourceInputs["stsEndpoint"] = state?.stsEndpoint;
    } else {
      const args = argsOrState;
      if (args?.identityId === undefined && !opts.urn) {
        throw new Error("Missing required property 'identityId'");
      }
      resourceInputs["accessTokenMaxTtl"] = args?.accessTokenMaxTtl;
      resourceInputs["accessTokenNumUsesLimit"] = args?.accessTokenNumUsesLimit;
      resourceInputs["accessTokenTrustedIps"] = args?.accessTokenTrustedIps;
      resourceInputs["accessTokenTtl"] = args?.accessTokenTtl;
      resourceInputs["allowedAccountIds"] = args?.allowedAccountIds;
      resourceInputs["allowedPrincipalArns"] = args?.allowedPrincipalArns;
      resourceInputs["identityId"] = args?.identityId;
      resourceInputs["stsEndpoint"] = args?.stsEndpoint;
    }
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
    super(IdentityAwsAuth.__pulumiType, name, resourceInputs, opts, false, /*dependency*/ utilities.getPackage());
  }
}
exports.IdentityAwsAuth = IdentityAwsAuth;
/** @internal */
IdentityAwsAuth.__pulumiType = "infisical:index/identityAwsAuth:IdentityAwsAuth";
// # sourceMappingURL=identityAwsAuth.js.map
