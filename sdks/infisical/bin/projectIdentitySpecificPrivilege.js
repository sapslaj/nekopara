"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.ProjectIdentitySpecificPrivilege = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
class ProjectIdentitySpecificPrivilege extends pulumi.CustomResource {
  /**
   * Get an existing ProjectIdentitySpecificPrivilege resource's state with the given name, ID, and optional extra
   * properties used to qualify the lookup.
   *
   * @param name The _unique_ name of the resulting resource.
   * @param id The _unique_ provider ID of the resource to lookup.
   * @param state Any extra arguments used during the lookup.
   * @param opts Optional settings to control the behavior of the CustomResource.
   */
  static get(name, id, state, opts) {
    return new ProjectIdentitySpecificPrivilege(name, state, { ...opts, id: id });
  }
  /**
   * Returns true if the given object is an instance of ProjectIdentitySpecificPrivilege.  This is designed to work even
   * when multiple copies of the Pulumi SDK have been loaded into the same process.
   */
  static isInstance(obj) {
    if (obj === undefined || obj === null) {
      return false;
    }
    return obj["__pulumiType"] === ProjectIdentitySpecificPrivilege.__pulumiType;
  }
  constructor(name, argsOrState, opts) {
    let resourceInputs = {};
    opts = opts || {};
    if (opts.id) {
      const state = argsOrState;
      resourceInputs["identityId"] = state?.identityId;
      resourceInputs["isTemporary"] = state?.isTemporary;
      resourceInputs["permission"] = state?.permission;
      resourceInputs["permissionsV2s"] = state?.permissionsV2s;
      resourceInputs["projectSlug"] = state?.projectSlug;
      resourceInputs["slug"] = state?.slug;
      resourceInputs["temporaryAccessEndTime"] = state?.temporaryAccessEndTime;
      resourceInputs["temporaryAccessStartTime"] = state?.temporaryAccessStartTime;
      resourceInputs["temporaryMode"] = state?.temporaryMode;
      resourceInputs["temporaryRange"] = state?.temporaryRange;
    } else {
      const args = argsOrState;
      if (args?.identityId === undefined && !opts.urn) {
        throw new Error("Missing required property 'identityId'");
      }
      if (args?.projectSlug === undefined && !opts.urn) {
        throw new Error("Missing required property 'projectSlug'");
      }
      resourceInputs["identityId"] = args?.identityId;
      resourceInputs["isTemporary"] = args?.isTemporary;
      resourceInputs["permission"] = args?.permission;
      resourceInputs["permissionsV2s"] = args?.permissionsV2s;
      resourceInputs["projectSlug"] = args?.projectSlug;
      resourceInputs["slug"] = args?.slug;
      resourceInputs["temporaryAccessEndTime"] = args?.temporaryAccessEndTime;
      resourceInputs["temporaryAccessStartTime"] = args?.temporaryAccessStartTime;
      resourceInputs["temporaryMode"] = args?.temporaryMode;
      resourceInputs["temporaryRange"] = args?.temporaryRange;
    }
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
    super(
      ProjectIdentitySpecificPrivilege.__pulumiType,
      name,
      resourceInputs,
      opts,
      false, /*dependency*/
      utilities.getPackage(),
    );
  }
}
exports.ProjectIdentitySpecificPrivilege = ProjectIdentitySpecificPrivilege;
/** @internal */
ProjectIdentitySpecificPrivilege.__pulumiType =
  "infisical:index/projectIdentitySpecificPrivilege:ProjectIdentitySpecificPrivilege";
// # sourceMappingURL=projectIdentitySpecificPrivilege.js.map
