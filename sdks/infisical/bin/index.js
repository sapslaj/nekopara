"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
var __createBinding = (this && this.__createBinding) || (Object.create
  ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = {
        enumerable: true,
        get: function() {
          return m[k];
        },
      };
    }
    Object.defineProperty(o, k2, desc);
  })
  : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
  }));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
  for (var p in m) {
    if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
  }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ProjectIdentitySpecificPrivilege =
  exports.ProjectIdentity =
  exports.ProjectGroup =
  exports.ProjectEnvironment =
  exports.Project =
  exports.IntegrationGcpSecretManager =
  exports.IntegrationDatabricks =
  exports.IntegrationCircleci =
  exports.IntegrationAwsSecretsManager =
  exports.IntegrationAwsParameterStore =
  exports.IdentityUniversalAuthClientSecret =
  exports.IdentityUniversalAuth =
  exports.IdentityOidcAuth =
  exports.IdentityKubernetesAuth =
  exports.IdentityGcpAuth =
  exports.IdentityAzureAuth =
  exports.IdentityAwsAuth =
  exports.Identity =
  exports.Group =
  exports.getSecretsOutput =
  exports.getSecrets =
  exports.getSecretTagOutput =
  exports.getSecretTag =
  exports.getSecretFoldersOutput =
  exports.getSecretFolders =
  exports.getProjectsOutput =
  exports.getProjects =
  exports.getIdentityDetailsOutput =
  exports.getIdentityDetails =
  exports.getGroupsOutput =
  exports.getGroups =
  exports.DynamicSecretSqlDatabase =
  exports.DynamicSecretKubernetes =
  exports.DynamicSecretAwsIam =
  exports.AppConnectionSupabase =
  exports.AppConnectionRender =
  exports.AppConnectionPostgres =
  exports.AppConnectionOracledb =
  exports.AppConnectionMysql =
  exports.AppConnectionMssql =
  exports.AppConnectionLdap =
  exports.AppConnectionGcp =
  exports.AppConnectionFlyio =
  exports.AppConnectionDatabricks =
  exports.AppConnectionCloudflare =
  exports.AppConnectionBitbucket =
  exports.AppConnectionAzureClientSecrets =
  exports.AppConnectionAws =
  exports.AppConnection1password =
  exports.AccessApprovalPolicy =
    void 0;
exports.types =
  exports.config =
  exports.SecretTag =
  exports.SecretSyncSupabase =
  exports.SecretSyncRender =
  exports.SecretSyncGithub =
  exports.SecretSyncGcpSecretManager =
  exports.SecretSyncFlyio =
  exports.SecretSyncDatabricks =
  exports.SecretSyncCloudflareWorkers =
  exports.SecretSyncCloudflarePages =
  exports.SecretSyncBitbucket =
  exports.SecretSyncAzureKeyVault =
  exports.SecretSyncAzureDevops =
  exports.SecretSyncAzureAppConfiguration =
  exports.SecretSyncAwsSecretsManager =
  exports.SecretSyncAwsParameterStore =
  exports.SecretSync1password =
  exports.SecretRotationPostgresCredentials =
  exports.SecretRotationOracledbCredentials =
  exports.SecretRotationMysqlCredentials =
  exports.SecretRotationMssqlCredentials =
  exports.SecretRotationLdapPassword =
  exports.SecretRotationAzureClientSecret =
  exports.SecretRotationAwsIamUserSecret =
  exports.SecretImport =
  exports.SecretFolder =
  exports.SecretApprovalPolicy =
  exports.Secret =
  exports.ProjectUser =
  exports.ProjectTemplate =
  exports.ProjectRole =
    void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
exports.AccessApprovalPolicy = null;
utilities.lazyLoad(exports, ["AccessApprovalPolicy"], () => require("./accessApprovalPolicy"));
exports.AppConnection1password = null;
utilities.lazyLoad(exports, ["AppConnection1password"], () => require("./appConnection1password"));
exports.AppConnectionAws = null;
utilities.lazyLoad(exports, ["AppConnectionAws"], () => require("./appConnectionAws"));
exports.AppConnectionAzureClientSecrets = null;
utilities.lazyLoad(exports, ["AppConnectionAzureClientSecrets"], () => require("./appConnectionAzureClientSecrets"));
exports.AppConnectionBitbucket = null;
utilities.lazyLoad(exports, ["AppConnectionBitbucket"], () => require("./appConnectionBitbucket"));
exports.AppConnectionCloudflare = null;
utilities.lazyLoad(exports, ["AppConnectionCloudflare"], () => require("./appConnectionCloudflare"));
exports.AppConnectionDatabricks = null;
utilities.lazyLoad(exports, ["AppConnectionDatabricks"], () => require("./appConnectionDatabricks"));
exports.AppConnectionFlyio = null;
utilities.lazyLoad(exports, ["AppConnectionFlyio"], () => require("./appConnectionFlyio"));
exports.AppConnectionGcp = null;
utilities.lazyLoad(exports, ["AppConnectionGcp"], () => require("./appConnectionGcp"));
exports.AppConnectionLdap = null;
utilities.lazyLoad(exports, ["AppConnectionLdap"], () => require("./appConnectionLdap"));
exports.AppConnectionMssql = null;
utilities.lazyLoad(exports, ["AppConnectionMssql"], () => require("./appConnectionMssql"));
exports.AppConnectionMysql = null;
utilities.lazyLoad(exports, ["AppConnectionMysql"], () => require("./appConnectionMysql"));
exports.AppConnectionOracledb = null;
utilities.lazyLoad(exports, ["AppConnectionOracledb"], () => require("./appConnectionOracledb"));
exports.AppConnectionPostgres = null;
utilities.lazyLoad(exports, ["AppConnectionPostgres"], () => require("./appConnectionPostgres"));
exports.AppConnectionRender = null;
utilities.lazyLoad(exports, ["AppConnectionRender"], () => require("./appConnectionRender"));
exports.AppConnectionSupabase = null;
utilities.lazyLoad(exports, ["AppConnectionSupabase"], () => require("./appConnectionSupabase"));
exports.DynamicSecretAwsIam = null;
utilities.lazyLoad(exports, ["DynamicSecretAwsIam"], () => require("./dynamicSecretAwsIam"));
exports.DynamicSecretKubernetes = null;
utilities.lazyLoad(exports, ["DynamicSecretKubernetes"], () => require("./dynamicSecretKubernetes"));
exports.DynamicSecretSqlDatabase = null;
utilities.lazyLoad(exports, ["DynamicSecretSqlDatabase"], () => require("./dynamicSecretSqlDatabase"));
exports.getGroups = null;
exports.getGroupsOutput = null;
utilities.lazyLoad(exports, ["getGroups", "getGroupsOutput"], () => require("./getGroups"));
exports.getIdentityDetails = null;
exports.getIdentityDetailsOutput = null;
utilities.lazyLoad(exports, ["getIdentityDetails", "getIdentityDetailsOutput"], () => require("./getIdentityDetails"));
exports.getProjects = null;
exports.getProjectsOutput = null;
utilities.lazyLoad(exports, ["getProjects", "getProjectsOutput"], () => require("./getProjects"));
exports.getSecretFolders = null;
exports.getSecretFoldersOutput = null;
utilities.lazyLoad(exports, ["getSecretFolders", "getSecretFoldersOutput"], () => require("./getSecretFolders"));
exports.getSecretTag = null;
exports.getSecretTagOutput = null;
utilities.lazyLoad(exports, ["getSecretTag", "getSecretTagOutput"], () => require("./getSecretTag"));
exports.getSecrets = null;
exports.getSecretsOutput = null;
utilities.lazyLoad(exports, ["getSecrets", "getSecretsOutput"], () => require("./getSecrets"));
exports.Group = null;
utilities.lazyLoad(exports, ["Group"], () => require("./group"));
exports.Identity = null;
utilities.lazyLoad(exports, ["Identity"], () => require("./identity"));
exports.IdentityAwsAuth = null;
utilities.lazyLoad(exports, ["IdentityAwsAuth"], () => require("./identityAwsAuth"));
exports.IdentityAzureAuth = null;
utilities.lazyLoad(exports, ["IdentityAzureAuth"], () => require("./identityAzureAuth"));
exports.IdentityGcpAuth = null;
utilities.lazyLoad(exports, ["IdentityGcpAuth"], () => require("./identityGcpAuth"));
exports.IdentityKubernetesAuth = null;
utilities.lazyLoad(exports, ["IdentityKubernetesAuth"], () => require("./identityKubernetesAuth"));
exports.IdentityOidcAuth = null;
utilities.lazyLoad(exports, ["IdentityOidcAuth"], () => require("./identityOidcAuth"));
exports.IdentityUniversalAuth = null;
utilities.lazyLoad(exports, ["IdentityUniversalAuth"], () => require("./identityUniversalAuth"));
exports.IdentityUniversalAuthClientSecret = null;
utilities.lazyLoad(
  exports,
  ["IdentityUniversalAuthClientSecret"],
  () => require("./identityUniversalAuthClientSecret"),
);
exports.IntegrationAwsParameterStore = null;
utilities.lazyLoad(exports, ["IntegrationAwsParameterStore"], () => require("./integrationAwsParameterStore"));
exports.IntegrationAwsSecretsManager = null;
utilities.lazyLoad(exports, ["IntegrationAwsSecretsManager"], () => require("./integrationAwsSecretsManager"));
exports.IntegrationCircleci = null;
utilities.lazyLoad(exports, ["IntegrationCircleci"], () => require("./integrationCircleci"));
exports.IntegrationDatabricks = null;
utilities.lazyLoad(exports, ["IntegrationDatabricks"], () => require("./integrationDatabricks"));
exports.IntegrationGcpSecretManager = null;
utilities.lazyLoad(exports, ["IntegrationGcpSecretManager"], () => require("./integrationGcpSecretManager"));
exports.Project = null;
utilities.lazyLoad(exports, ["Project"], () => require("./project"));
exports.ProjectEnvironment = null;
utilities.lazyLoad(exports, ["ProjectEnvironment"], () => require("./projectEnvironment"));
exports.ProjectGroup = null;
utilities.lazyLoad(exports, ["ProjectGroup"], () => require("./projectGroup"));
exports.ProjectIdentity = null;
utilities.lazyLoad(exports, ["ProjectIdentity"], () => require("./projectIdentity"));
exports.ProjectIdentitySpecificPrivilege = null;
utilities.lazyLoad(exports, ["ProjectIdentitySpecificPrivilege"], () => require("./projectIdentitySpecificPrivilege"));
exports.ProjectRole = null;
utilities.lazyLoad(exports, ["ProjectRole"], () => require("./projectRole"));
exports.ProjectTemplate = null;
utilities.lazyLoad(exports, ["ProjectTemplate"], () => require("./projectTemplate"));
exports.ProjectUser = null;
utilities.lazyLoad(exports, ["ProjectUser"], () => require("./projectUser"));
__exportStar(require("./provider"), exports);
const provider_1 = require("./provider");
exports.Secret = null;
utilities.lazyLoad(exports, ["Secret"], () => require("./secret"));
exports.SecretApprovalPolicy = null;
utilities.lazyLoad(exports, ["SecretApprovalPolicy"], () => require("./secretApprovalPolicy"));
exports.SecretFolder = null;
utilities.lazyLoad(exports, ["SecretFolder"], () => require("./secretFolder"));
exports.SecretImport = null;
utilities.lazyLoad(exports, ["SecretImport"], () => require("./secretImport"));
exports.SecretRotationAwsIamUserSecret = null;
utilities.lazyLoad(exports, ["SecretRotationAwsIamUserSecret"], () => require("./secretRotationAwsIamUserSecret"));
exports.SecretRotationAzureClientSecret = null;
utilities.lazyLoad(exports, ["SecretRotationAzureClientSecret"], () => require("./secretRotationAzureClientSecret"));
exports.SecretRotationLdapPassword = null;
utilities.lazyLoad(exports, ["SecretRotationLdapPassword"], () => require("./secretRotationLdapPassword"));
exports.SecretRotationMssqlCredentials = null;
utilities.lazyLoad(exports, ["SecretRotationMssqlCredentials"], () => require("./secretRotationMssqlCredentials"));
exports.SecretRotationMysqlCredentials = null;
utilities.lazyLoad(exports, ["SecretRotationMysqlCredentials"], () => require("./secretRotationMysqlCredentials"));
exports.SecretRotationOracledbCredentials = null;
utilities.lazyLoad(
  exports,
  ["SecretRotationOracledbCredentials"],
  () => require("./secretRotationOracledbCredentials"),
);
exports.SecretRotationPostgresCredentials = null;
utilities.lazyLoad(
  exports,
  ["SecretRotationPostgresCredentials"],
  () => require("./secretRotationPostgresCredentials"),
);
exports.SecretSync1password = null;
utilities.lazyLoad(exports, ["SecretSync1password"], () => require("./secretSync1password"));
exports.SecretSyncAwsParameterStore = null;
utilities.lazyLoad(exports, ["SecretSyncAwsParameterStore"], () => require("./secretSyncAwsParameterStore"));
exports.SecretSyncAwsSecretsManager = null;
utilities.lazyLoad(exports, ["SecretSyncAwsSecretsManager"], () => require("./secretSyncAwsSecretsManager"));
exports.SecretSyncAzureAppConfiguration = null;
utilities.lazyLoad(exports, ["SecretSyncAzureAppConfiguration"], () => require("./secretSyncAzureAppConfiguration"));
exports.SecretSyncAzureDevops = null;
utilities.lazyLoad(exports, ["SecretSyncAzureDevops"], () => require("./secretSyncAzureDevops"));
exports.SecretSyncAzureKeyVault = null;
utilities.lazyLoad(exports, ["SecretSyncAzureKeyVault"], () => require("./secretSyncAzureKeyVault"));
exports.SecretSyncBitbucket = null;
utilities.lazyLoad(exports, ["SecretSyncBitbucket"], () => require("./secretSyncBitbucket"));
exports.SecretSyncCloudflarePages = null;
utilities.lazyLoad(exports, ["SecretSyncCloudflarePages"], () => require("./secretSyncCloudflarePages"));
exports.SecretSyncCloudflareWorkers = null;
utilities.lazyLoad(exports, ["SecretSyncCloudflareWorkers"], () => require("./secretSyncCloudflareWorkers"));
exports.SecretSyncDatabricks = null;
utilities.lazyLoad(exports, ["SecretSyncDatabricks"], () => require("./secretSyncDatabricks"));
exports.SecretSyncFlyio = null;
utilities.lazyLoad(exports, ["SecretSyncFlyio"], () => require("./secretSyncFlyio"));
exports.SecretSyncGcpSecretManager = null;
utilities.lazyLoad(exports, ["SecretSyncGcpSecretManager"], () => require("./secretSyncGcpSecretManager"));
exports.SecretSyncGithub = null;
utilities.lazyLoad(exports, ["SecretSyncGithub"], () => require("./secretSyncGithub"));
exports.SecretSyncRender = null;
utilities.lazyLoad(exports, ["SecretSyncRender"], () => require("./secretSyncRender"));
exports.SecretSyncSupabase = null;
utilities.lazyLoad(exports, ["SecretSyncSupabase"], () => require("./secretSyncSupabase"));
exports.SecretTag = null;
utilities.lazyLoad(exports, ["SecretTag"], () => require("./secretTag"));
// Export sub-modules:
const config = require("./config");
exports.config = config;
const types = require("./types");
exports.types = types;
const _module = {
  version: utilities.getVersion(),
  construct: (name, type, urn) => {
    switch (type) {
      case "infisical:index/accessApprovalPolicy:AccessApprovalPolicy":
        return new exports.AccessApprovalPolicy(name, undefined, { urn });
      case "infisical:index/appConnection1password:AppConnection1password":
        return new exports.AppConnection1password(name, undefined, { urn });
      case "infisical:index/appConnectionAws:AppConnectionAws":
        return new exports.AppConnectionAws(name, undefined, { urn });
      case "infisical:index/appConnectionAzureClientSecrets:AppConnectionAzureClientSecrets":
        return new exports.AppConnectionAzureClientSecrets(name, undefined, { urn });
      case "infisical:index/appConnectionBitbucket:AppConnectionBitbucket":
        return new exports.AppConnectionBitbucket(name, undefined, { urn });
      case "infisical:index/appConnectionCloudflare:AppConnectionCloudflare":
        return new exports.AppConnectionCloudflare(name, undefined, { urn });
      case "infisical:index/appConnectionDatabricks:AppConnectionDatabricks":
        return new exports.AppConnectionDatabricks(name, undefined, { urn });
      case "infisical:index/appConnectionFlyio:AppConnectionFlyio":
        return new exports.AppConnectionFlyio(name, undefined, { urn });
      case "infisical:index/appConnectionGcp:AppConnectionGcp":
        return new exports.AppConnectionGcp(name, undefined, { urn });
      case "infisical:index/appConnectionLdap:AppConnectionLdap":
        return new exports.AppConnectionLdap(name, undefined, { urn });
      case "infisical:index/appConnectionMssql:AppConnectionMssql":
        return new exports.AppConnectionMssql(name, undefined, { urn });
      case "infisical:index/appConnectionMysql:AppConnectionMysql":
        return new exports.AppConnectionMysql(name, undefined, { urn });
      case "infisical:index/appConnectionOracledb:AppConnectionOracledb":
        return new exports.AppConnectionOracledb(name, undefined, { urn });
      case "infisical:index/appConnectionPostgres:AppConnectionPostgres":
        return new exports.AppConnectionPostgres(name, undefined, { urn });
      case "infisical:index/appConnectionRender:AppConnectionRender":
        return new exports.AppConnectionRender(name, undefined, { urn });
      case "infisical:index/appConnectionSupabase:AppConnectionSupabase":
        return new exports.AppConnectionSupabase(name, undefined, { urn });
      case "infisical:index/dynamicSecretAwsIam:DynamicSecretAwsIam":
        return new exports.DynamicSecretAwsIam(name, undefined, { urn });
      case "infisical:index/dynamicSecretKubernetes:DynamicSecretKubernetes":
        return new exports.DynamicSecretKubernetes(name, undefined, { urn });
      case "infisical:index/dynamicSecretSqlDatabase:DynamicSecretSqlDatabase":
        return new exports.DynamicSecretSqlDatabase(name, undefined, { urn });
      case "infisical:index/group:Group":
        return new exports.Group(name, undefined, { urn });
      case "infisical:index/identity:Identity":
        return new exports.Identity(name, undefined, { urn });
      case "infisical:index/identityAwsAuth:IdentityAwsAuth":
        return new exports.IdentityAwsAuth(name, undefined, { urn });
      case "infisical:index/identityAzureAuth:IdentityAzureAuth":
        return new exports.IdentityAzureAuth(name, undefined, { urn });
      case "infisical:index/identityGcpAuth:IdentityGcpAuth":
        return new exports.IdentityGcpAuth(name, undefined, { urn });
      case "infisical:index/identityKubernetesAuth:IdentityKubernetesAuth":
        return new exports.IdentityKubernetesAuth(name, undefined, { urn });
      case "infisical:index/identityOidcAuth:IdentityOidcAuth":
        return new exports.IdentityOidcAuth(name, undefined, { urn });
      case "infisical:index/identityUniversalAuth:IdentityUniversalAuth":
        return new exports.IdentityUniversalAuth(name, undefined, { urn });
      case "infisical:index/identityUniversalAuthClientSecret:IdentityUniversalAuthClientSecret":
        return new exports.IdentityUniversalAuthClientSecret(name, undefined, { urn });
      case "infisical:index/integrationAwsParameterStore:IntegrationAwsParameterStore":
        return new exports.IntegrationAwsParameterStore(name, undefined, { urn });
      case "infisical:index/integrationAwsSecretsManager:IntegrationAwsSecretsManager":
        return new exports.IntegrationAwsSecretsManager(name, undefined, { urn });
      case "infisical:index/integrationCircleci:IntegrationCircleci":
        return new exports.IntegrationCircleci(name, undefined, { urn });
      case "infisical:index/integrationDatabricks:IntegrationDatabricks":
        return new exports.IntegrationDatabricks(name, undefined, { urn });
      case "infisical:index/integrationGcpSecretManager:IntegrationGcpSecretManager":
        return new exports.IntegrationGcpSecretManager(name, undefined, { urn });
      case "infisical:index/project:Project":
        return new exports.Project(name, undefined, { urn });
      case "infisical:index/projectEnvironment:ProjectEnvironment":
        return new exports.ProjectEnvironment(name, undefined, { urn });
      case "infisical:index/projectGroup:ProjectGroup":
        return new exports.ProjectGroup(name, undefined, { urn });
      case "infisical:index/projectIdentity:ProjectIdentity":
        return new exports.ProjectIdentity(name, undefined, { urn });
      case "infisical:index/projectIdentitySpecificPrivilege:ProjectIdentitySpecificPrivilege":
        return new exports.ProjectIdentitySpecificPrivilege(name, undefined, { urn });
      case "infisical:index/projectRole:ProjectRole":
        return new exports.ProjectRole(name, undefined, { urn });
      case "infisical:index/projectTemplate:ProjectTemplate":
        return new exports.ProjectTemplate(name, undefined, { urn });
      case "infisical:index/projectUser:ProjectUser":
        return new exports.ProjectUser(name, undefined, { urn });
      case "infisical:index/secret:Secret":
        return new exports.Secret(name, undefined, { urn });
      case "infisical:index/secretApprovalPolicy:SecretApprovalPolicy":
        return new exports.SecretApprovalPolicy(name, undefined, { urn });
      case "infisical:index/secretFolder:SecretFolder":
        return new exports.SecretFolder(name, undefined, { urn });
      case "infisical:index/secretImport:SecretImport":
        return new exports.SecretImport(name, undefined, { urn });
      case "infisical:index/secretRotationAwsIamUserSecret:SecretRotationAwsIamUserSecret":
        return new exports.SecretRotationAwsIamUserSecret(name, undefined, { urn });
      case "infisical:index/secretRotationAzureClientSecret:SecretRotationAzureClientSecret":
        return new exports.SecretRotationAzureClientSecret(name, undefined, { urn });
      case "infisical:index/secretRotationLdapPassword:SecretRotationLdapPassword":
        return new exports.SecretRotationLdapPassword(name, undefined, { urn });
      case "infisical:index/secretRotationMssqlCredentials:SecretRotationMssqlCredentials":
        return new exports.SecretRotationMssqlCredentials(name, undefined, { urn });
      case "infisical:index/secretRotationMysqlCredentials:SecretRotationMysqlCredentials":
        return new exports.SecretRotationMysqlCredentials(name, undefined, { urn });
      case "infisical:index/secretRotationOracledbCredentials:SecretRotationOracledbCredentials":
        return new exports.SecretRotationOracledbCredentials(name, undefined, { urn });
      case "infisical:index/secretRotationPostgresCredentials:SecretRotationPostgresCredentials":
        return new exports.SecretRotationPostgresCredentials(name, undefined, { urn });
      case "infisical:index/secretSync1password:SecretSync1password":
        return new exports.SecretSync1password(name, undefined, { urn });
      case "infisical:index/secretSyncAwsParameterStore:SecretSyncAwsParameterStore":
        return new exports.SecretSyncAwsParameterStore(name, undefined, { urn });
      case "infisical:index/secretSyncAwsSecretsManager:SecretSyncAwsSecretsManager":
        return new exports.SecretSyncAwsSecretsManager(name, undefined, { urn });
      case "infisical:index/secretSyncAzureAppConfiguration:SecretSyncAzureAppConfiguration":
        return new exports.SecretSyncAzureAppConfiguration(name, undefined, { urn });
      case "infisical:index/secretSyncAzureDevops:SecretSyncAzureDevops":
        return new exports.SecretSyncAzureDevops(name, undefined, { urn });
      case "infisical:index/secretSyncAzureKeyVault:SecretSyncAzureKeyVault":
        return new exports.SecretSyncAzureKeyVault(name, undefined, { urn });
      case "infisical:index/secretSyncBitbucket:SecretSyncBitbucket":
        return new exports.SecretSyncBitbucket(name, undefined, { urn });
      case "infisical:index/secretSyncCloudflarePages:SecretSyncCloudflarePages":
        return new exports.SecretSyncCloudflarePages(name, undefined, { urn });
      case "infisical:index/secretSyncCloudflareWorkers:SecretSyncCloudflareWorkers":
        return new exports.SecretSyncCloudflareWorkers(name, undefined, { urn });
      case "infisical:index/secretSyncDatabricks:SecretSyncDatabricks":
        return new exports.SecretSyncDatabricks(name, undefined, { urn });
      case "infisical:index/secretSyncFlyio:SecretSyncFlyio":
        return new exports.SecretSyncFlyio(name, undefined, { urn });
      case "infisical:index/secretSyncGcpSecretManager:SecretSyncGcpSecretManager":
        return new exports.SecretSyncGcpSecretManager(name, undefined, { urn });
      case "infisical:index/secretSyncGithub:SecretSyncGithub":
        return new exports.SecretSyncGithub(name, undefined, { urn });
      case "infisical:index/secretSyncRender:SecretSyncRender":
        return new exports.SecretSyncRender(name, undefined, { urn });
      case "infisical:index/secretSyncSupabase:SecretSyncSupabase":
        return new exports.SecretSyncSupabase(name, undefined, { urn });
      case "infisical:index/secretTag:SecretTag":
        return new exports.SecretTag(name, undefined, { urn });
      default:
        throw new Error(`unknown resource type ${type}`);
    }
  },
};
pulumi.runtime.registerResourceModule("infisical", "index/accessApprovalPolicy", _module);
pulumi.runtime.registerResourceModule("infisical", "index/appConnection1password", _module);
pulumi.runtime.registerResourceModule("infisical", "index/appConnectionAws", _module);
pulumi.runtime.registerResourceModule("infisical", "index/appConnectionAzureClientSecrets", _module);
pulumi.runtime.registerResourceModule("infisical", "index/appConnectionBitbucket", _module);
pulumi.runtime.registerResourceModule("infisical", "index/appConnectionCloudflare", _module);
pulumi.runtime.registerResourceModule("infisical", "index/appConnectionDatabricks", _module);
pulumi.runtime.registerResourceModule("infisical", "index/appConnectionFlyio", _module);
pulumi.runtime.registerResourceModule("infisical", "index/appConnectionGcp", _module);
pulumi.runtime.registerResourceModule("infisical", "index/appConnectionLdap", _module);
pulumi.runtime.registerResourceModule("infisical", "index/appConnectionMssql", _module);
pulumi.runtime.registerResourceModule("infisical", "index/appConnectionMysql", _module);
pulumi.runtime.registerResourceModule("infisical", "index/appConnectionOracledb", _module);
pulumi.runtime.registerResourceModule("infisical", "index/appConnectionPostgres", _module);
pulumi.runtime.registerResourceModule("infisical", "index/appConnectionRender", _module);
pulumi.runtime.registerResourceModule("infisical", "index/appConnectionSupabase", _module);
pulumi.runtime.registerResourceModule("infisical", "index/dynamicSecretAwsIam", _module);
pulumi.runtime.registerResourceModule("infisical", "index/dynamicSecretKubernetes", _module);
pulumi.runtime.registerResourceModule("infisical", "index/dynamicSecretSqlDatabase", _module);
pulumi.runtime.registerResourceModule("infisical", "index/group", _module);
pulumi.runtime.registerResourceModule("infisical", "index/identity", _module);
pulumi.runtime.registerResourceModule("infisical", "index/identityAwsAuth", _module);
pulumi.runtime.registerResourceModule("infisical", "index/identityAzureAuth", _module);
pulumi.runtime.registerResourceModule("infisical", "index/identityGcpAuth", _module);
pulumi.runtime.registerResourceModule("infisical", "index/identityKubernetesAuth", _module);
pulumi.runtime.registerResourceModule("infisical", "index/identityOidcAuth", _module);
pulumi.runtime.registerResourceModule("infisical", "index/identityUniversalAuth", _module);
pulumi.runtime.registerResourceModule("infisical", "index/identityUniversalAuthClientSecret", _module);
pulumi.runtime.registerResourceModule("infisical", "index/integrationAwsParameterStore", _module);
pulumi.runtime.registerResourceModule("infisical", "index/integrationAwsSecretsManager", _module);
pulumi.runtime.registerResourceModule("infisical", "index/integrationCircleci", _module);
pulumi.runtime.registerResourceModule("infisical", "index/integrationDatabricks", _module);
pulumi.runtime.registerResourceModule("infisical", "index/integrationGcpSecretManager", _module);
pulumi.runtime.registerResourceModule("infisical", "index/project", _module);
pulumi.runtime.registerResourceModule("infisical", "index/projectEnvironment", _module);
pulumi.runtime.registerResourceModule("infisical", "index/projectGroup", _module);
pulumi.runtime.registerResourceModule("infisical", "index/projectIdentity", _module);
pulumi.runtime.registerResourceModule("infisical", "index/projectIdentitySpecificPrivilege", _module);
pulumi.runtime.registerResourceModule("infisical", "index/projectRole", _module);
pulumi.runtime.registerResourceModule("infisical", "index/projectTemplate", _module);
pulumi.runtime.registerResourceModule("infisical", "index/projectUser", _module);
pulumi.runtime.registerResourceModule("infisical", "index/secret", _module);
pulumi.runtime.registerResourceModule("infisical", "index/secretApprovalPolicy", _module);
pulumi.runtime.registerResourceModule("infisical", "index/secretFolder", _module);
pulumi.runtime.registerResourceModule("infisical", "index/secretImport", _module);
pulumi.runtime.registerResourceModule("infisical", "index/secretRotationAwsIamUserSecret", _module);
pulumi.runtime.registerResourceModule("infisical", "index/secretRotationAzureClientSecret", _module);
pulumi.runtime.registerResourceModule("infisical", "index/secretRotationLdapPassword", _module);
pulumi.runtime.registerResourceModule("infisical", "index/secretRotationMssqlCredentials", _module);
pulumi.runtime.registerResourceModule("infisical", "index/secretRotationMysqlCredentials", _module);
pulumi.runtime.registerResourceModule("infisical", "index/secretRotationOracledbCredentials", _module);
pulumi.runtime.registerResourceModule("infisical", "index/secretRotationPostgresCredentials", _module);
pulumi.runtime.registerResourceModule("infisical", "index/secretSync1password", _module);
pulumi.runtime.registerResourceModule("infisical", "index/secretSyncAwsParameterStore", _module);
pulumi.runtime.registerResourceModule("infisical", "index/secretSyncAwsSecretsManager", _module);
pulumi.runtime.registerResourceModule("infisical", "index/secretSyncAzureAppConfiguration", _module);
pulumi.runtime.registerResourceModule("infisical", "index/secretSyncAzureDevops", _module);
pulumi.runtime.registerResourceModule("infisical", "index/secretSyncAzureKeyVault", _module);
pulumi.runtime.registerResourceModule("infisical", "index/secretSyncBitbucket", _module);
pulumi.runtime.registerResourceModule("infisical", "index/secretSyncCloudflarePages", _module);
pulumi.runtime.registerResourceModule("infisical", "index/secretSyncCloudflareWorkers", _module);
pulumi.runtime.registerResourceModule("infisical", "index/secretSyncDatabricks", _module);
pulumi.runtime.registerResourceModule("infisical", "index/secretSyncFlyio", _module);
pulumi.runtime.registerResourceModule("infisical", "index/secretSyncGcpSecretManager", _module);
pulumi.runtime.registerResourceModule("infisical", "index/secretSyncGithub", _module);
pulumi.runtime.registerResourceModule("infisical", "index/secretSyncRender", _module);
pulumi.runtime.registerResourceModule("infisical", "index/secretSyncSupabase", _module);
pulumi.runtime.registerResourceModule("infisical", "index/secretTag", _module);
pulumi.runtime.registerResourcePackage("infisical", {
  version: utilities.getVersion(),
  constructProvider: (name, type, urn) => {
    if (type !== "pulumi:providers:infisical") {
      throw new Error(`unknown provider type ${type}`);
    }
    return new provider_1.Provider(name, undefined, { urn });
  },
});
// # sourceMappingURL=index.js.map
