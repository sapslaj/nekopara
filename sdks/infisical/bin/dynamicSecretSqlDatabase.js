"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.DynamicSecretSqlDatabase = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
class DynamicSecretSqlDatabase extends pulumi.CustomResource {
  /**
   * Get an existing DynamicSecretSqlDatabase resource's state with the given name, ID, and optional extra
   * properties used to qualify the lookup.
   *
   * @param name The _unique_ name of the resulting resource.
   * @param id The _unique_ provider ID of the resource to lookup.
   * @param state Any extra arguments used during the lookup.
   * @param opts Optional settings to control the behavior of the CustomResource.
   */
  static get(name, id, state, opts) {
    return new DynamicSecretSqlDatabase(name, state, { ...opts, id: id });
  }
  /**
   * Returns true if the given object is an instance of DynamicSecretSqlDatabase.  This is designed to work even
   * when multiple copies of the Pulumi SDK have been loaded into the same process.
   */
  static isInstance(obj) {
    if (obj === undefined || obj === null) {
      return false;
    }
    return obj["__pulumiType"] === DynamicSecretSqlDatabase.__pulumiType;
  }
  constructor(name, argsOrState, opts) {
    let resourceInputs = {};
    opts = opts || {};
    if (opts.id) {
      const state = argsOrState;
      resourceInputs["configuration"] = state?.configuration;
      resourceInputs["defaultTtl"] = state?.defaultTtl;
      resourceInputs["environmentSlug"] = state?.environmentSlug;
      resourceInputs["maxTtl"] = state?.maxTtl;
      resourceInputs["metadatas"] = state?.metadatas;
      resourceInputs["name"] = state?.name;
      resourceInputs["path"] = state?.path;
      resourceInputs["projectSlug"] = state?.projectSlug;
      resourceInputs["usernameTemplate"] = state?.usernameTemplate;
    } else {
      const args = argsOrState;
      if (args?.configuration === undefined && !opts.urn) {
        throw new Error("Missing required property 'configuration'");
      }
      if (args?.defaultTtl === undefined && !opts.urn) {
        throw new Error("Missing required property 'defaultTtl'");
      }
      if (args?.environmentSlug === undefined && !opts.urn) {
        throw new Error("Missing required property 'environmentSlug'");
      }
      if (args?.path === undefined && !opts.urn) {
        throw new Error("Missing required property 'path'");
      }
      if (args?.projectSlug === undefined && !opts.urn) {
        throw new Error("Missing required property 'projectSlug'");
      }
      resourceInputs["configuration"] = args?.configuration;
      resourceInputs["defaultTtl"] = args?.defaultTtl;
      resourceInputs["environmentSlug"] = args?.environmentSlug;
      resourceInputs["maxTtl"] = args?.maxTtl;
      resourceInputs["metadatas"] = args?.metadatas;
      resourceInputs["name"] = args?.name;
      resourceInputs["path"] = args?.path;
      resourceInputs["projectSlug"] = args?.projectSlug;
      resourceInputs["usernameTemplate"] = args?.usernameTemplate;
    }
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
    super(
      DynamicSecretSqlDatabase.__pulumiType,
      name,
      resourceInputs,
      opts,
      false, /*dependency*/
      utilities.getPackage(),
    );
  }
}
exports.DynamicSecretSqlDatabase = DynamicSecretSqlDatabase;
/** @internal */
DynamicSecretSqlDatabase.__pulumiType = "infisical:index/dynamicSecretSqlDatabase:DynamicSecretSqlDatabase";
// # sourceMappingURL=dynamicSecretSqlDatabase.js.map
