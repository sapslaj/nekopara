"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.Secret = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
class Secret extends pulumi.CustomResource {
  /**
   * Get an existing Secret resource's state with the given name, ID, and optional extra
   * properties used to qualify the lookup.
   *
   * @param name The _unique_ name of the resulting resource.
   * @param id The _unique_ provider ID of the resource to lookup.
   * @param state Any extra arguments used during the lookup.
   * @param opts Optional settings to control the behavior of the CustomResource.
   */
  static get(name, id, state, opts) {
    return new Secret(name, state, { ...opts, id: id });
  }
  /**
   * Returns true if the given object is an instance of Secret.  This is designed to work even
   * when multiple copies of the Pulumi SDK have been loaded into the same process.
   */
  static isInstance(obj) {
    if (obj === undefined || obj === null) {
      return false;
    }
    return obj["__pulumiType"] === Secret.__pulumiType;
  }
  constructor(name, argsOrState, opts) {
    let resourceInputs = {};
    opts = opts || {};
    if (opts.id) {
      const state = argsOrState;
      resourceInputs["envSlug"] = state?.envSlug;
      resourceInputs["folderPath"] = state?.folderPath;
      resourceInputs["lastUpdated"] = state?.lastUpdated;
      resourceInputs["name"] = state?.name;
      resourceInputs["secretReminder"] = state?.secretReminder;
      resourceInputs["tagIds"] = state?.tagIds;
      resourceInputs["value"] = state?.value;
      resourceInputs["workspaceId"] = state?.workspaceId;
    } else {
      const args = argsOrState;
      if (args?.envSlug === undefined && !opts.urn) {
        throw new Error("Missing required property 'envSlug'");
      }
      if (args?.folderPath === undefined && !opts.urn) {
        throw new Error("Missing required property 'folderPath'");
      }
      if (args?.value === undefined && !opts.urn) {
        throw new Error("Missing required property 'value'");
      }
      resourceInputs["envSlug"] = args?.envSlug;
      resourceInputs["folderPath"] = args?.folderPath;
      resourceInputs["name"] = args?.name;
      resourceInputs["secretReminder"] = args?.secretReminder;
      resourceInputs["tagIds"] = args?.tagIds;
      resourceInputs["value"] = args?.value ? pulumi.secret(args.value) : undefined;
      resourceInputs["workspaceId"] = args?.workspaceId;
      resourceInputs["lastUpdated"] = undefined /*out*/;
    }
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
    const secretOpts = { additionalSecretOutputs: ["value"] };
    opts = pulumi.mergeOptions(opts, secretOpts);
    super(Secret.__pulumiType, name, resourceInputs, opts, false, /*dependency*/ utilities.getPackage());
  }
}
exports.Secret = Secret;
/** @internal */
Secret.__pulumiType = "infisical:index/secret:Secret";
// # sourceMappingURL=secret.js.map
