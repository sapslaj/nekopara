"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.IntegrationAwsParameterStore = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
class IntegrationAwsParameterStore extends pulumi.CustomResource {
  /**
   * Get an existing IntegrationAwsParameterStore resource's state with the given name, ID, and optional extra
   * properties used to qualify the lookup.
   *
   * @param name The _unique_ name of the resulting resource.
   * @param id The _unique_ provider ID of the resource to lookup.
   * @param state Any extra arguments used during the lookup.
   * @param opts Optional settings to control the behavior of the CustomResource.
   */
  static get(name, id, state, opts) {
    return new IntegrationAwsParameterStore(name, state, { ...opts, id: id });
  }
  /**
   * Returns true if the given object is an instance of IntegrationAwsParameterStore.  This is designed to work even
   * when multiple copies of the Pulumi SDK have been loaded into the same process.
   */
  static isInstance(obj) {
    if (obj === undefined || obj === null) {
      return false;
    }
    return obj["__pulumiType"] === IntegrationAwsParameterStore.__pulumiType;
  }
  constructor(name, argsOrState, opts) {
    let resourceInputs = {};
    opts = opts || {};
    if (opts.id) {
      const state = argsOrState;
      resourceInputs["accessKeyId"] = state?.accessKeyId;
      resourceInputs["assumeRoleArn"] = state?.assumeRoleArn;
      resourceInputs["awsRegion"] = state?.awsRegion;
      resourceInputs["environment"] = state?.environment;
      resourceInputs["integrationAuthId"] = state?.integrationAuthId;
      resourceInputs["integrationId"] = state?.integrationId;
      resourceInputs["options"] = state?.options;
      resourceInputs["parameterStorePath"] = state?.parameterStorePath;
      resourceInputs["projectId"] = state?.projectId;
      resourceInputs["secretAccessKey"] = state?.secretAccessKey;
      resourceInputs["secretPath"] = state?.secretPath;
    } else {
      const args = argsOrState;
      if (args?.awsRegion === undefined && !opts.urn) {
        throw new Error("Missing required property 'awsRegion'");
      }
      if (args?.environment === undefined && !opts.urn) {
        throw new Error("Missing required property 'environment'");
      }
      if (args?.parameterStorePath === undefined && !opts.urn) {
        throw new Error("Missing required property 'parameterStorePath'");
      }
      if (args?.projectId === undefined && !opts.urn) {
        throw new Error("Missing required property 'projectId'");
      }
      if (args?.secretPath === undefined && !opts.urn) {
        throw new Error("Missing required property 'secretPath'");
      }
      resourceInputs["accessKeyId"] = args?.accessKeyId ? pulumi.secret(args.accessKeyId) : undefined;
      resourceInputs["assumeRoleArn"] = args?.assumeRoleArn;
      resourceInputs["awsRegion"] = args?.awsRegion;
      resourceInputs["environment"] = args?.environment;
      resourceInputs["options"] = args?.options;
      resourceInputs["parameterStorePath"] = args?.parameterStorePath;
      resourceInputs["projectId"] = args?.projectId;
      resourceInputs["secretAccessKey"] = args?.secretAccessKey ? pulumi.secret(args.secretAccessKey) : undefined;
      resourceInputs["secretPath"] = args?.secretPath;
      resourceInputs["integrationAuthId"] = undefined /*out*/;
      resourceInputs["integrationId"] = undefined /*out*/;
    }
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
    const secretOpts = { additionalSecretOutputs: ["accessKeyId", "secretAccessKey"] };
    opts = pulumi.mergeOptions(opts, secretOpts);
    super(
      IntegrationAwsParameterStore.__pulumiType,
      name,
      resourceInputs,
      opts,
      false, /*dependency*/
      utilities.getPackage(),
    );
  }
}
exports.IntegrationAwsParameterStore = IntegrationAwsParameterStore;
/** @internal */
IntegrationAwsParameterStore.__pulumiType = "infisical:index/integrationAwsParameterStore:IntegrationAwsParameterStore";
// # sourceMappingURL=integrationAwsParameterStore.js.map
